/*
 * -----------------------
 * ------ SMART APP ------
 * -----------------------
 *
 * STOP:  Do NOT PUBLISH the code to GitHub, it is a VIOLATION of the license terms.
 * You are NOT allowed to modify, share, distribute, reuse or publicly host (e.g. GITHUB) the code. Refer to the license details on our website.
 *
 */

/* **DISCLAIMER**
* THIS SOFTWARE IS PROVIDED "AS IS" AND ANY EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
* HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
* Without limitation of the foregoing, Contributors/Regents expressly does not warrant that:
* 1. the software will meet your requirements or expectations;
* 2. the software or the software content will be free of bugs, errors, viruses or other defects;
* 3. any results, output, or data provided through or generated by the software will be accurate, up-to-date, complete or reliable;
* 4. the software will be compatible with third party software;
* 5. any errors in the software will be corrected.
* The user assumes all responsibility for selecting the software and for the results obtained from the use of the software. The user shall bear the entire risk as to the quality and the performance of the software.
*/ 

def clientVersion() { "01.09.05" }

/**
* Manage locks and user codes remotely using an API
*
* Copyright RBoy Apps, redistribution, modification or reuse of code is not allowed without permission
*
* Change Log:
* 2021-03-02 - (v01.09.05) ADT deprecated by SmartThings
* 2020-11-16 - (v01.09.03) Skip door if the user accidentally left out the open door notify or relock timeout
* 2020-11-07 - (v01.09.02) FAQ Link
* 2020-10-27 - (v01.09.01) Check for invalid DTH
* 2020-10-19 - (v01.09.00) Refresh users page once a minute to see user status updates
* 2020-10-06 - (v01.08.07) Don't enable ADT direct control by default when a keypad is detected
* 2020-10-05 - (v01.08.06) Fix 0 digit warning from some locks, added option to manually clear codes from the lock from advanced settings, show warning if user type isn't selected
* 2020-10-01 - (v01.08.04) Fix missing initial lock notification when using a delay timer
* 2020-09-15 - (v01.08.03) Update garage door controls to support new capabilities
* 2020-09-08 - (v01.08.02) Update for new platform capability model
* 2020-09-03 - (v01.08.01) "list locks" deprecated, added "lock status" which returns a JSON with a lock state and battery level
* 2020-09-01 - (v01.07.08) Update for retirement of Classic app
* 2020-08-19 - (v01.07.07) Add option to arm ADT to away for manual locking
* 2020-08-17 - (v01.07.06) Only post one message when locks stop responding
* 2020-08-11 - (v01.07.05) Detect deleted routines after a migration
* 2020-08-05 - (v01.07.04) Dont' send code upgrade notifications
* 2020-07-29 - (v01.07.03) Fix for Door open/close actions when using multiple doors on Android Classic app
* 2020-07-26 - (v01.07.01) New app/platform improvements
* 2020-07-09 - (v01.06.02) Show the year for expiration users on summary page
* 2020-06-22 - (v01.06.01) Optimized page layout for door open/close actions when multiple locks are selected
* 2020-05-22 - (v01.06.00) Added option to lock/unlock locks for presence users and disabled auto unlock for open doors (security)
* 2020-05-01 - (v01.05.00) Added option to toggle switches on keypad lock/unlock/arm modes
* 2020-04-02 - (v01.04.04) Fix for keypad lock report for Enhanced ZigBee device handler
* 2020-01-20 - (v01.04.03) Update icons for broken ST Android app 2.18
* 2019-11-26 - (v01.04.02) Update for changes in platform limits, optimize performance
* 2019-11-06 - (v01.04.00) Updated base engine to 07.10.00
* 2019-11-05 - (v01.03.01) Support header authentication, Improved validation, support for getting user programmed states and sync with base engine 07.09.07
* 2019-10-11 - (v01.02.00) Added support for Sonos spoken notification with volume, added option to disable rechecking and notifying open door
* 2019-08-12 - (v01.01.19) Correct missing geolocation message text
* 2019-06-03 - (v01.01.18) Added support for new lock capabilities
* 2019-04-16 - (v01.01.17) Fix optional text for ADT
* 2019-04-12 - (v01.01.16) Check if user entered invalid characters for SMS number and notify on error
* 2019-04-03 - (v01.01.15) Enable exit beeping on keypads using direct control for SHM/ADT when delayed actions are enabled
* 2019-04-02 - (v01.01.14) Check for updates once a day and don't reset it everytime the user opens the app, allow user to save without selecting locks
* 2019-03-23 - (v01.01.12) Sometimes on a fresh install ST saves corrupted data, handle it
* 2019-03-20 - (v01.01.11) Detect if a new lock is added and Back is pressed instead of Save
* 2019-03-18 - (v01.01.10) Show active users in green instead of blue
* 2019-03-08 - (v01.01.09) Fixed extra notifications when using delayed lock actions
* 2019-02-28 - (v01.01.08) Enabled keypad SHM/ADT control by default when detected
* 2019-01-28 - (v01.01.07) Fix for direct control option not showing for renamed keypads when individual door controls are enabled
* 2019-01-13 - (v01.01.06) Check for unsaved/unintialized user changes and reinitialize the app automatically
* 2018-12-13 - (v01.01.05) Reduce frequency to kickstarts since platform is more stable
* 2018-12-04 - (v01.01.04) Improve UI layout, separate page for notifications
* 2018-11-28 - (v01.01.03) Sync up with base engine version 07.08.00
* 2018-11-25 - (v01.01.02) Sync up with base engine version 07.07.08
* 2018-10-18 - (v01.01.01) Handle rare bug with ST Android app when updating app maxUserName is not initialized
* 2018-09-10 - (v01.01.00) Added support for creating, deleting and getting users by names, baseline Sure Programming Engine 07.07.06
* 2018-08-27 - (v01.00.01) Default expiration date is todays' date for a new user
* 2018-08-24 - (v01.00.00) Public release with baseline Sure Programming Engine 07.07.02
*
*/

definition(
    name: "Lock Manager API",
    namespace: "rboy",
    author: "RBoy Apps",
    description: "Manage locks and user codes remotely through an API",
    category: "Safety & Security",
    iconUrl: "https://www.rboyapps.com/images/LockAutomaterAPI.png",
    iconX2Url: "https://www.rboyapps.com/images/LockAutomaterAPI.png"
)

preferences {
    page(name: "loginPage")
    page(name: "loginPage2")
    page(name: "setupApp")
    page(name: "usersPage")
    page(name: "notificationsPage")
    page(name: "unlockLockActionsPage")
    page(name: "unlockKeypadActionsPage")
    page(name: "unlockManualActionsPage")
    page(name: "armKeypadActionsPage")
    page(name: "lockKeypadActionsPage")
    page(name: "lockManualActionsPage")
    page(name: "openCloseDoorPage")
    page(name: "openCloseDoorPageSummary")
    page(name: "scheduleCodesPage")
    page(name: "userConfigPage")
    page(name: "apiPage")
}

private getPlatformUsersLimit() { 300 } // Any more and the platform times out while trying to load the UI (max 300)
private getUsersLimit() { maxCodes ? Math.min(platformUsersLimit, maxCodes) : platformUsersLimit } // Don't exceed platform limits
private getDefaultUsers() { 10 } // Default number of users
private getDefaultSendDelay() { 15 }
private getDefaultRetries() { 15 }
private getMaxRetries() { retries == null ? defaultRetries : retries }
private getPlatformAPIUsersLimit() { 100 } // Any more and the platform times out while trying to load the UI
private getSchedulesSuffix() { ('A'..'C') }
private getCodeOptions() {
    [
        "Permanent": "Permanent",
        "One time": "One time (burner)",
        "Expire on": "Start/end date and time",
        "Scheduled": "Weekly/daily schedule(s)",
        "Presence": "Activate on user presence",
        "Modes": "Activate on mode(s)",
        "Inactive": "Temporarily disabled"
    ]
}
private getSchedulingOptions() {
    [
        'All Week',
        'Monday to Friday',
        'Saturday & Sunday',
        'Monday',
        'Tuesday',
        'Wednesday',
        'Thursday',
        'Friday',
        'Saturday',
        'Sunday'
    ]
}

def loginPage() {
    log.trace "Login page"
    if (!state.loginSuccess && username) {
        loginCheck()
    }
    if (state.loginSuccess) {
        setupApp()
    } else {
        state.sendUpdate = true
        loginSection("loginPage", "loginPage2")
    }
}

def loginPage2() {
    log.trace "Login page2"
    if (!state.loginSuccess && username) {
        loginCheck()
    }
    if (state.loginSuccess) {
        setupApp()
    } else {
        state.sendUpdate = true
        loginSection("loginPage2", "loginPage")
    }
}

private loginSection(name, nextPage) {
    dynamicPage(name: name, title: "Lock Manager API v${clientVersion()}", install: state.loginSuccess, uninstall: true, nextPage: state.loginSuccess ? "" : nextPage) {
        section() {
            if (state.loginError) {
                log.warn "Authenticating failed: ${state.loginError}"
                paragraph title: "Login failed", image: "https://www.rboyapps.com/images/RBoyApps.png", required: true, "${state.loginError}"
            } else {
                log.debug "Check authentication credentials, Login: $username"
                paragraph title: "Login", image: "https://www.rboyapps.com/images/RBoyApps.png", required: false, "Enter your RBoy Apps username\nYou can retrieve your username from www.rboyapps.com lost password page"
            }

            input name: "username", type: "text", title: "Username", capitalization: "none", submitOnChange: false, required: false
        }
    }
}

def setupApp() {
    log.trace "$settings"

    dynamicPage(name: "setupApp", title: "Lock Manager API v${clientVersion()}", install: true, uninstall: true) {
        if (state.clientVersion) { // If the app has already been installed
            // If we don't have one or were asked to generate a new one, then generate one
            if (!getCallBackURL()) {
                setupCallBackURL() // Initialize the ST access token to enable API call backs
            }
            
            section("Select Locks") {
                // Check if the lock pin code length match on all the locks
                def pinDetails = getLockPinLengthDetails()
                def pinLen = pinDetails.pinLen // Fixed pin code length
                def maxPinLen = pinDetails.maxPinLen // Variable minimum pin code length
                def minPinLen = pinDetails.minPinLen // Variable maximum pin code length
                def pinLenError = pinDetails.pinLenError
                log.trace "Configured lock fixed code length: $pinLen, max code length: $maxPinLen, min code length: $minPinLen"
                if (pinLenError) {
                    def msg = "YOUR LOCKS ARE CONFIGURED TO ACCEPT DIFFERENT CODE DIGIT LENGTHS, PROGRAMMING MAY FAIL!"
                    paragraph title: msg, required: true, ""
                }
                for (lock in locks) {
                    if (!lock.hasCommand("setCode")) {
                        def msg = "${lock} IS USING A DEVICE HANDLER WHICH DOES NOT SUPPORT PROGRAMMING!"
                        paragraph title: msg, required: true, ""
                    }
                }
                input "locks", "capability.lock", title: "Locks", description: "Select all locks to manage", required: false, multiple: true, submitOnChange: true, image: "https://www.rboyapps.com/images/HandleLock.png"
            }

            section("User/API Management") {
                log.trace "state.previousMaxUserNames: ${state.previousMaxUserNames?.inspect()}, maxUserNames: ${maxUserNames?.inspect()}"
                // Bug in ST Classic app, if users presses back on new installation without pressing Save, it saves the default values as a String
                if ((maxUserNames != null) && ((state.previousMaxUserNames as Integer) > (maxUserNames as Integer))) { // If the number of max users has reduced, then clear excess the slots
                    log.debug "Detected a reduction in number of maxUserNames, clearing rental user slots ${(maxUserNames as Integer) + 1} to ${(state.previousMaxUserNames as Integer)}"
                    startTimer(1, removeUsersOffline, [ data : [start: ((maxUserNames as Integer) + 1), end: (state.previousMaxUserNames as Integer)] ]) // Clear the slots
                } // Clear excess users offline so it doesn't slow down the UI (do it while reducing users so that when you increase the slots are already cleared)

                state.previousMaxUserNames = maxUserNames as Integer // Reset it (bug on a fresh install ST sometimes stores it as a String)

                paragraph "Set the number of programmable users\n(0 to disable)"
                log.trace "Max common codes supported by locks ${maxCodes}"
                input name: "maxUserNames", title: "Number of users${maxCodes ? " (0 to ${usersLimit})" : ""}", type: "number", defaultValue: defaultUsers, required: true, multiple: false, image: "https://www.rboyapps.com/images/Users.png", range: "0..${maxCodes ? usersLimit : platformUsersLimit}", submitOnChange: true
                href(name: "api", title: "Configure API", page: "apiPage", description: "Get/change API URL", required: false, image: "https://www.rboyapps.com/images/LockAutomaterAPI-API.png")
                href(name: "users", title: "Manage users", page: "usersPage", description: "Modify users and custom actions", required: false, image: "https://www.rboyapps.com/images/UserPage.png")
            }

            section("General Settings") {
                // Unlock actions for all users (global)
                def hrefParams = [
                    user: null, 
                    passed: true 
                ]
                href(name: "unlockLockActions", params: hrefParams, title: "Lock/unlock actions", page: "unlockLockActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/LockUnlock.png")
                href(name: "openCloseDoorSummary", title: "Door open/close actions", page: "openCloseDoorPageSummary", description: "", required: false, image: "https://www.rboyapps.com/images/DoorOpenClose.png")
                href(name: "notifications", params: hrefParams, title: "Notifications", page: "notificationsPage", description: "", required: false, image: "https://www.rboyapps.com/images/NotificationsD.png")
            }

            section("Help") {
                href(name: "help", title: "FAQ", description: "API Programming Guide", style: "external", url: "https://lockmanagerapi.docs.apiary.io/", required: false, image: "https://www.rboyapps.com/images/FAQ.png")
            }

            section() {
                label title: "Assign a name for this SmartApp (optional)", required: false
                input name: "updateNotifications", title: "Check for new versions of the app", type: "bool", defaultValue: true, required: false
            }

            section("Advanced Programming Options (optional)", hideable: true, hidden: true) {
                paragraph "Sure-Programming: To improve programming reliability, the app will keep trying to program the user codes until the lock confirms the programming or up to the maximum number of retries"
                input name: "retries", title: "Maximum code programming retries", type: "number", defaultValue: "${defaultRetries}", range: "0..999", required: false
                paragraph "Change this setting if all the user codes aren't being programmed on the lock correctly. This settings determines the time gap between sending each user code to the lock. If the codes are sent too fast, they may fail to be set properly"
                input name: "sendDelay", title: "Delay between codes (seconds):", type: "number", defaultValue: "${defaultSendDelay}", range: "5..60", required: false
                paragraph "Enable this to get additional detailed notifications like code programming, lock responses etc. NOTE: this can generate a lot of messages"
                input name: "detailedNotifications", title: "Get detailed notifications", type: "bool", defaultValue: false, required: false
                paragraph ""
                paragraph title: "[WARNING] CLEAR USER CODES", "ENABLING THIS OPTION WILL CLEAR THE FIRST ${(maxUserNames as Integer) ?: 0} USER CODES FROM EACH OF THE LOCKS SELECTED ABOVE. AFTER ENABLING THIS OPTION, CLICK 'DONE' AND WAIT FOR THE CLEARING TO TAKE EFFECT", required: true
                input name: "clearUserCodes", title: "CLEAR EXISTING USER CODES", type: "bool", defaultValue: false, required: false
            }
        } else {
            section() {
                paragraph "Click 'Done' to install the app. Then you can open it from the 'SmartApps' tab to finish configuring it.\r\n\r\nEnsure that there is a buffering device between your lock and hub. See FAQ page for more details."
                label title: "Assign a name for this SmartApp (optional)", required: false
            }
        }
        
        section("Confidential", hideable: true, hidden: true) {
            paragraph("RBoy Apps Username: " + (username?.toLowerCase() ?: "Unlicensed") + (state.loginSuccess ? "" : ", contact suppport"))
        }

        remove("Uninstall")
    }
}

def notificationsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        user = params.user ?: ""
        log.trace "Passed from main page, using params lookup for user $user"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user $user"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""

    log.trace "Notifications Page, user:$user, name:$name, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"notificationsPage", title: (user ? "Setup custom notifications for ${name ?: "user ${user}"}" : "Setup notification options"), uninstall: false, install: false) {
        section {
            input "audioDevices${user}", "capability.audioNotification", title: "Speak notifications on", required: false, multiple: true, submitOnChange: true, image: "https://www.rboyapps.com/images/Horn.png"
            if (settings."audioDevices${user}") {
                input "audioVolume${user}", "number", title: "...at this volume level (optional)", description: "keep current", required: false, range: "1..100"
            }
            input("recipients${user}", "contact", title: "Send notifications to", multiple: true, required: false, image: "https://www.rboyapps.com/images/Notifications.png") {
                paragraph "You can enter multiple phone numbers by separating them with a '*'\nE.g. 5551234567*+18747654321"
                input "sms${user}", "phone", title: "Send SMS notification to", required: false, image: "https://www.rboyapps.com/images/Notifications.png"
                input "disableAllNotify${user}", "bool", title: "Disable all push notifications${user ? " for " + (name ?: "user ${user}") : ""}", defaultValue: false, required: false
            }
        }
    }
}

def apiPage() {
    dynamicPage(name: "apiPage", title: "API Configuration", install: false, uninstall: false) {
        section("Generate API") {
            def url = ""

            // If we don't have one or were asked to generate a new one, then generate one
            if (!(url = getCallBackURL()) || (state.priorToggle != toggle)) {
                url = setupCallBackURL() // Initialize the ST access token to enable API call backs
            }
            
            state.priorToggle = toggle // Save the current state
            if (url) {
                updateSetting("apiUrl", url) // Update it so the user can copy it
                def msg = "KEEP THIS API URL SECURE\nIt provides full access to locks and users\nRefer to documentation for details"
                paragraph title: msg, required: true, url
                input "apiUrl", "text", title: "Click here to copy the API URL"
                paragraph title: "ID", required: true, app.id
                paragraph title: "ACCESS_TOKEN", required: true, state.accessToken
                paragraph ""
                paragraph "WARNING: Generating a new ACCESS_TOKEN will cause the old API URL to stop working and CANNOT be undone"
                input "toggle", "bool", title: "Tap button to generate new ACCESS_TOKEN", submitOnChange: true
            } else {
                def msg = "CANNOT ENABLE API\nDid you enable OAuth for the SmartApp in the IDE App Settings?"
                paragraph title: msg, required: true, ""
            }
        }
    }
}

def openCloseDoorPageSummary() {
    if (locks?.size() > 1) {
        dynamicPage(name:"openCloseDoorPageSummary", title: "Select door open/close sensor and configure the automatic unlock, relock and notifications for each door", uninstall: false, install: false) {
            section {
                for (lock in locks) {
                    def hrefParams = [
                        lockId: lock.id, 
                        passed: true 
                    ]
                    href(name: "openCloseDoor${lock}", params: hrefParams, title: "${lock}", page: "openCloseDoorPage", description: doorOpenCloseStatus(lock), required: false, image: "https://www.rboyapps.com/images/DoorOpenClose.png")
                }
            }
        }
    } else if(locks?.size() == 1) {
        def hrefParams = [
            lockId: locks.first().id, 
            passed: true 
        ]
        openCloseDoorPage(hrefParams)
    } else {
        dynamicPage(name:"openCloseDoorPageSummary", title: "Select door open/close sensor and configure the automatic unlock, relock and notifications for each door", uninstall: false, install: false) {
            section("No locks/doors to configure") {
                paragraph title: "First select locks on the previous page", required: true, ""
            }
        }
    }
}

private doorOpenCloseStatus(lock) { 
    (
        ((lock.hasAttribute('autolock') && (lock.latestValue("autolock") == "enabled")) ? false : (settings."relockDoor${lock}" ? (settings."relockImmediate${lock}" ?: settings."relockAfter${lock}") : false)) ||
        (settings."openNotifyBeep${lock}" && settings."sensor${lock}") ||
        (settings."openNotify${lock}" && settings."sensor${lock}" && settings."openNotifyTimeout${lock}")
    ) ? "Configured" : ""
}

def openCloseDoorPage(params) {
    // params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
        log.trace "Passed from main page, using params lookup ${params}"
    } else if (atomicState.params) {
        params = atomicState.params
        log.trace "Passed from submitOnChange, atomicState lookup ${atomicState.params}"
    } else {
        log.error "Invalid params, no details found. Params: $params, saved params: $atomicState.params"
    }
    
    def lock = params?.lockId ? locks.find { it.id == params?.lockId } : locks.first()

    log.trace "Door Open Close Page, lock $lock, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"openCloseDoorPage", title: "Door open/close actions for ${lock}", uninstall: false, install: false) {
        section {
            def priorRelockDoor = settings."relockDoor${lock}"
            def priorRelockImmediate = settings."relockImmediate${lock}"
            def priorRelockAfter = settings."relockAfter${lock}"
            def priorRetractDeadbolt = false //settings."retractDeadbolt${lock}"
            def priorNotifyOpen = settings."openNotify${lock}"
            def priorNotifyOpenTimeout = settings."openNotifyTimeout${lock}"
            def priorOpenNotifyModes = settings."openNotifyModes${lock}"
            def priorRelockDoorModes = settings."relockDoorModes${lock}"
            def priorNotifyBeep = settings."openNotifyBeep${lock}"
            def priorSensor = settings."sensor${lock}"
            def reqDoorSensor = priorRelockImmediate || priorRetractDeadbolt || priorNotifyOpen || priorNotifyBeep

            paragraph "Select door open/close sensor and configure the automatic unlock, relock and notifications"
            if (priorRelockDoor || priorRetractDeadbolt || priorNotifyOpen || priorNotifyBeep) {
                input "sensor${lock}", "capability.contactSensor", title: "Door open/close sensor${reqDoorSensor ? "" : " (optional)"}", required: ( reqDoorSensor ? true : false), submitOnChange: true // required for deadbolt, immediate relock or notifications
            }

            // Sanity check do not offer AutoLock is hardware autoLock is engaged
            if (lock.hasAttribute('autolock') && (lock.latestValue("autolock") == "enabled")) {
                paragraph title: "Disable AutoLock on physical lock to use SmartApp AutoReLock features", required: true, ""
            } else {
                input "relockDoor${lock}", "bool", title: "Relock door automatically", defaultValue: priorRelockDoor, required: false, submitOnChange: true
                if (priorRelockDoor) {
                    input "relockImmediate${lock}", "bool", title: "Relock immediately after closing", defaultValue: priorRelockImmediate, required: false, submitOnChange: true
                    if (!priorRelockImmediate) {
                        input "relockAfter${lock}", "number", title: "Relock after ${priorSensor ? "closing" : "unlocking"} (minutes)", defaultValue: priorRelockAfter, required: true                   
                    }
                    input "relockDoorModes${lock}", "mode", title: "...only when in this mode(s) (optional)", defaultValue: priorRelockDoorModes, required: false, multiple: true
                }
                if (priorRetractDeadbolt) {
                    paragraph "NOTE: Make sure the AutoLock feature on the lock is disabled to avoid an infinite locking/unlocking loop.", required: false, submitOnChange: true
                }
                //input "retractDeadbolt${lock}", "bool", title: "Unlock door if locked while open", defaultValue: priorRetractDeadbolt, description: "This retracts the deadbolt if it extends while the door is still open", required: false, submitOnChange: true
            }

            input "openNotifyBeep${lock}", "capability.tone", title: "Ring chime when door is opened", multiple: true, required: false, submitOnChange: true
            input "openNotify${lock}", "bool", title: "Notify if door has been left open", defaultValue: priorNotifyOpen, required: false, submitOnChange: true
            if (priorNotifyOpen) {
                input "openNotifyTimeout${lock}", "number", title: "...for (minutes)", defaultValue: priorNotifyOpenTimeout, required: true, range: "1..*"
                input "openNotifyRepeat${lock}", "bool", title: "...recheck and notify", defaultValue: true, required: false
            }
            if (priorNotifyOpen || priorNotifyBeep) {
                input "openNotifyModes${lock}", "mode", title: "...only when in this mode(s) (optional)", defaultValue: priorOpenNotifyModes, required: false, multiple: true
            }
        }
    }
}

def unlockLockActionsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        user = params.user ?: ""
        log.trace "Passed from main page, using params lookup for user $user"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user $user"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""

    log.trace "Lock/Unlock Action Page, user:$user, name:$name, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"unlockLockActionsPage", title: (user ? "Setup custom actions/notifications for ${name ?: "user ${user}"}" : "Setup lock/unlock actions for each door"), uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/
        def showActions = true
        section {
            if (user) { // User specific override options
                paragraph "Enabling custom user actions and notifications will override over the general actions defined on the first page"
                input "userOverrideUnlockActions${user}", "bool", title: "Define custom actions for ${name ?: "user ${user}"}", required: true,  submitOnChange: true
                if (!settings."userOverrideUnlockActions${user}") { // Check if user has enabled specific override actions then show menu
                    showActions = false
                }
            }
            if  (showActions && locks?.size() > 1) {
                input "individualDoorActions${user}", "bool", title: "Separate actions for each door", required: true,  submitOnChange: true
            }
        }
        if (showActions) { // Do we need to show actions?
            if (settings."individualDoorActions${user}") {
                for (lock in locks) {
                    section ("$lock", hideable: false) {
                        def hrefParams = [
                            user: user,
                            lock: lock as String,
                            passed: true 
                        ]
                        href(name: "unlockKeypadActions${lock}", params: hrefParams, title: "Keypad Unlock Actions", page: "unlockKeypadActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/KeypadUnlocked.png")
                        href(name: "lockKeypadActions${lock}", params: hrefParams, title: "Keypad Lock Actions", page: "lockKeypadActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/KeypadLocked.png")
                        if (!user) {
                            href(name: "unlockManualActions${lock}", params: hrefParams, title: "Manual Unlock Actions", page: "unlockManualActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/ManualUnlocked.png")
                            href(name: "lockManualActions${lock}", params: hrefParams, title: "Manual Lock Actions", page: "lockManualActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/ManualLocked.png")
                        }
                    }
                }
            } else {
                section("", hideable: false) {
                    def hrefParams = [
                        user: user,
                        lock: "",
                        passed: true 
                    ]
                    href(name: "unlockKeypadActions", params: hrefParams, title: "Keypad Unlock Actions", page: "unlockKeypadActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/KeypadUnlocked.png")
                    href(name: "lockKeypadActions", params: hrefParams, title: "Keypad Lock Actions", page: "lockKeypadActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/KeypadLocked.png")
                    if (!user) {
                        href(name: "unlockManualActions", params: hrefParams, title: "Manual Unlock Actions", page: "unlockManualActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/ManualUnlocked.png")
                        href(name: "lockManualActions", params: hrefParams, title: "Manual Lock Actions", page: "lockManualActionsPage", description: "", required: false, image: "https://www.rboyapps.com/images/ManualLocked.png")
                    }
                }
            }
        }
        section {
            if (user && (settings."userNotify${user}" ? settings."userNotify${user}".toBoolean() : settings."userNotify${user}")) { // User specific override notification options
                def showCustomNotifications = true
                input "userOverrideNotifications${user}", "bool", title: "Define custom notifications for ${name ?: "user ${user}"}", required: true,  submitOnChange: true
                if (!settings."userOverrideNotifications${user}") { // Check if user has enabled specific override actions then show menu
                    showCustomNotifications = false
                }
                if (showCustomNotifications) {
                    def hrefParams = [
                        user: user, 
                        passed: true 
                    ]
                    href(name: "notifications", params: hrefParams, title: "Notifications", page: "notificationsPage", description: "", required: false, image: "https://www.rboyapps.com/images/NotificationsD.png")
                }
            }
        }
    }
}

def unlockKeypadActionsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    def lock = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        user = params.user ?: ""
        lock = params.lock ?: ""
        log.trace "Passed from main page, using params lookup for user $user, lock $lock"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        lock = atomicState.params.lock ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user $user, lock $lock"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""

    log.trace "Keypad Unlock Action Page, user:$user, name:$name, lock $lock, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"unlockKeypadActionsPage", title: "Setup keypad unlock actions for doors" + (user ? " for user $name." : ""), uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/

        section ("Door Keypad Unlock Actions${lock ? " for $lock" : ""}") {
            //def priorHomePhrase = settings."homePhrase${lock}${user}"
            def priorHomeMode = settings."homeMode${lock}${user}"
            def isLockKeypad = locks?.find{ it.displayName == lock }?.hasAttribute("armMode") // Check if the current lock (lock specific option) is a keypad
            def isAnyLockKeypad = locks?.any { keypad -> keypad.hasAttribute("armMode") } // Check if any lock (for global options) is a keypad
            def areAllLockKeypad = locks?.every { keypad -> keypad.hasAttribute("armMode") } // Check every lock (for global options) is a keypad
            
            paragraph "Run these actions when a user successfully unlocks the door using a code"
            /*if (lock ? isLockKeypad : isAnyLockKeypad) { // Show only if we have a supported keypad (for selected lock or for general settings)
                input "keypadArmDisarm${lock}${user}", "bool", title: "Control ADT using keypad", required: false, submitOnChange: true, defaultValue: false
            }
            if (lock ? (isLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true) : (areAllLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true)) { // Hide only if we have have a supported keypad for selected lock and using keypad to control SHM
                //input "homeDisarm${lock}${user}", "bool", title: "Disarm Classic SHM", required: false
                input "adtDisarm${lock}${user}", "bool", title: "Disarm ADT", required: false, submitOnChange: true
            }
            if (((lock ? (isLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true) : (areAllLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true)) && settings."adtDisarm${lock}${user}") ||
                ((lock ? isLockKeypad : isAnyLockKeypad) && (settings."keypadArmDisarm${lock}${user}"))) { // If we have a seleted an ADT option
                input "adtDevices", "capability.battery", title: "Select ADT panel${true || settings."adtDisarm${lock}${user}" ? "" : " (optional)"}", multiple: false, required: (true || settings."adtDisarm${lock}${user}" ? true : false) // Required if we select ADT
            }*/
            //input "homePhrase${lock}${user}", "enum", title: "Run routine", required: false, options: phrases, defaultValue: priorHomePhrase
            input "homeMode${lock}${user}", "mode", title: "Change mode to", required: false, multiple: false, defaultValue: priorHomeMode
            input "turnOnSwitchesAfterSunset${lock}${user}", "capability.switch", title: "Turn on light(s) after dark", required: false, multiple: true
            input "turnOnSwitches${lock}${user}", "capability.switch", title: "Turn on switch(s)", required: false, multiple: true
            input "turnOffSwitches${lock}${user}", "capability.switch", title: "Turn off switch(s)", required: false, multiple: true
            input "toggleSwitches${lock}${user}", "capability.switch", title: "Toggle switch(s)", required: false, multiple: true
            input "unlockLocks${lock}${user}","capability.lock", title: "Unlock lock(s)", required: false, multiple: true
            input "openGarage${lock}${user}","capability.doorControl", title: "Open garage door(s)", required: false, multiple: true

            paragraph title: "Do NOT run the above unlock actions for door${lock ? " $lock" : ""} under any of the following conditions", required: true, ""
            input "runXPeopleUnlockActions${lock}${user}", "capability.presenceSensor", title: "...when any these people are present", required: false, multiple: true
            input "runXModeUnlockActions${lock}${user}", "mode", title: "...when in any of these mode(s)", required: false, multiple: true
        }
    }
}

def unlockManualActionsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def lock = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        lock = params.lock ?: ""
        log.trace "Passed from main page, using params lookup for lock $lock"
    } else if (atomicState.params) {
        lock = atomicState.params.lock ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for lock $lock"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    log.trace "Manual Unlock Action Page, lock $lock, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"unlockManualActionsPage", title: "Setup manual unlock actions for doors", uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/

        section ("Door Manual Unlock Actions${lock ? " for $lock" : ""}") {
            //def priorHomePhrase = settings."homePhraseManual${lock}"
            def priorHomeMode = settings."homeModeManual${lock}"
            def priorManualNotify = settings."manualNotify${lock}"

            paragraph "Run these actions when a user unlocks the door manually"
            //input "homeDisarmManual${lock}", "bool", title: "Disarm Classic SHM", required: false
            /*input "adtDisarmManual${lock}", "bool", title: "Disarm ADT", required: false, submitOnChange: true
            if (settings."adtDisarmManual${lock}") { // If we have a seleted an ADT option
                input "adtDevices", "capability.battery", title: "Select ADT panel", multiple: false, required: true // Required if we select ADT
            }*/
            //input "homePhraseManual${lock}", "enum", title: "Run routine", required: false, options: phrases, defaultValue: priorHomePhrase
            input "homeModeManual${lock}", "mode", title: "Change mode to", required: false, multiple: false, defaultValue: priorHomeMode
            input "turnOnSwitchesAfterSunsetManual${lock}", "capability.switch", title: "Turn on light(s) after dark", required: false, multiple: true
            input "turnOnSwitchesManual${lock}", "capability.switch", title: "Turn on switch(s)", required: false, multiple: true
            input "turnOffSwitchesManual${lock}", "capability.switch", title: "Turn off switch(s)", required: false, multiple: true
            input "unlockLocksManual${lock}","capability.lock", title: "Unlock lock(s)", required: false, multiple: true
            input "openGarageManual${lock}","capability.doorControl", title: "Open garage door(s)", required: false, multiple: true

            paragraph title: "Do NOT run the above unlock actions for door${lock ? " $lock" : ""} under any of the following conditions", required: true, ""
            input "runXPeopleUnlockActionsManual${lock}", "capability.presenceSensor", title: "...when any these people are present", required: false, multiple: true
            input "runXModeUnlockActionsManual${lock}", "mode", title: "...when in any of these mode(s)", required: false, multiple: true

            paragraph "Unlock Notification Options"
            input "manualNotify${lock}", "bool", title: "Notify on manual unlock", required: false, submitOnChange: true
            if (priorManualNotify) {
                input "manualNotifyModes${lock}", "mode", title: "...only when in this mode(s) (optional)", required: false, multiple: true
            }
        }
    }
}

def armKeypadActionsPage(params) {
    // params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
        log.trace "Passed from main page, using params lookup ${params}"
    } else if (atomicState.params) {
        params = atomicState.params
        log.trace "Passed from submitOnChange, atomicState lookup ${atomicState.params}"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def user = params?.user ?: ""
    def lock = params?.lock ?: ""
    def arm = params?.arm ?: ""

    def name = user ? settings."userNames${user}" : ""

    log.trace "Arm Keypad Action Page, user:$user, name:$name, lock $lock, arm $arm, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"armKeypadActionsPage", title: "Setup Arm ${arm?.capitalize()} button actions for ${lock ?: "keypad"}" + (user ? " for user $name." : ""), uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/

        section {
            input "keypadArmActions${lock}${user}${arm}", "bool", title: "Enable custom actions", required: false, submitOnChange: true
            if (settings."keypadArmActions${lock}${user}${arm}") {
                //def priorLockPhrase = settings."externalLockPhrase${lock}${user}${arm}"
                def priorHomeMode = settings."externalLockMode${lock}${user}${arm}"

                //input "externalLockPhrase${lock}${user}${arm}", "enum", title: "Run routine", required: false, options: phrases, defaultValue: priorLockPhrase
                input "externalLockMode${lock}${user}${arm}", "mode", title: "Change mode to", required: false, multiple: false, defaultValue: priorHomeMode
                input "externalLockTurnOnSwitches${lock}${user}${arm}", "capability.switch", title: "Turn on switch(s)", required: false, multiple: true
                input "externalLockTurnOffSwitches${lock}${user}${arm}", "capability.switch", title: "Turn off switch(s)", required: false, multiple: true
                input "externalLockToggleSwitches${lock}${user}${arm}", "capability.switch", title: "Toggle switch(s)", required: false, multiple: true
                input "lockLocks${lock}${user}${arm}","capability.lock", title: "Lock lock(s)", required: false, multiple: true
                input "closeGarage${lock}${user}${arm}","capability.doorControl", title: "Close garage door(s)", required: false, multiple: true
            }
        }
    }
}

def lockKeypadActionsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    def lock = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        user = params.user ?: ""
        lock = params.lock ?: ""
        log.trace "Passed from main page, using params lookup for user $user, lock $lock"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        lock = atomicState.params.lock ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user $user, lock $lock"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""

    log.trace "Keypad Lock Action Page, user:$user, name:$name, lock $lock, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"lockKeypadActionsPage", title: "Setup keypad lock actions for doors" + (user ? " for user $name." : ""), uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/

        section ("Door Keypad Lock Actions${lock ? " for $lock" : ""}") {
            //def priorLockPhrase = settings."externalLockPhrase${lock}${user}"
            def priorHomeMode = settings."externalLockMode${lock}${user}"
            def isLockKeypad = locks?.find{ it.displayName == lock }?.hasAttribute("armMode") // Check if the current lock (lock specific option) is a keypad
            def isAnyLockKeypad = locks?.any { keypad -> keypad.hasAttribute("armMode") } // Check if any lock (for global options) is a keypad
            def areAllLockKeypad = locks?.every { keypad -> keypad.hasAttribute("armMode") } // Check every lock (for global options) is a keypad
            
            paragraph "Some locks can be locked from the keypad outside${user ? " with user codes" : ""}. If your lock has his feature then you can assign actions to execute when it is locked ${user ? "with a user code" : "from the keypad"}"
            /*if (lock ? isLockKeypad : isAnyLockKeypad) { // Show only if we have a supported keypad (for selected lock or for general settings)
                input "keypadArmDisarm${lock}${user}", "bool", title: "Control ADT using keypad", required: false, submitOnChange: true, defaultValue: false
            }
            if (lock ? (isLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true) : (areAllLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true)) { // Hide only if we have have a supported keypad for selected lock and using keypad to control SHM
                //input "homeArm${lock}${user}", "bool", title: "Arm Classic SHM to Away", required: false, submitOnChange: true
                input "adtArm${lock}${user}", "bool", title: "Arm ADT to Away", required: false, submitOnChange: true
                if (settings."adtArm${lock}${user}") { // || settings."homeArm${lock}${user}"
                    input "homeArmStay${lock}${user}", "bool", title: "...arm to Stay instead of Away", required: false
                }
            }
            if (((lock ? (isLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true) : (areAllLockKeypad ? !(settings."keypadArmDisarm${lock}${user}") : true)) && settings."adtArm${lock}${user}") ||
                ((lock ? isLockKeypad : isAnyLockKeypad) && (settings."keypadArmDisarm${lock}${user}"))) { // If we have a seleted an ADT option
                input "adtDevices", "capability.battery", title: "Select ADT panel${true || settings."adtArm${lock}${user}" ? "" : " (optional)"}", multiple: false, required: (true || settings."adtArm${lock}${user}" ? true : false) // Required if we select ADT
            }*/
            if (lock ? isLockKeypad : isAnyLockKeypad) { // Show only if we have a supported keypad (for selected lock or for general settings)
                def hrefParams = [
                    user: user,
                    lock: lock as String,
                    passed: true 
                ]
                href(name: "armAwayKeypadActions${lock}", params: hrefParams + [arm: "away"], title: "Away/On button actions", page: "armKeypadActionsPage", description: "", required: false, image: "")
                href(name: "armStayKeypadActions${lock}", params: hrefParams + [arm: "stay"], title: "Stay/Partial button actions", page: "armKeypadActionsPage", description: "", required: false, image: "")
                href(name: "armNightKeypadActions${lock}", params: hrefParams + [arm: "night"], title: "Night button actions", page: "armKeypadActionsPage", description: "", required: false, image: "")
            }
            //input "externalLockPhrase${lock}${user}", "enum", title: "Run routine", required: false, options: phrases, defaultValue: priorLockPhrase
            input "externalLockMode${lock}${user}", "mode", title: "Change mode to", required: false, multiple: false, defaultValue: priorHomeMode
            input "externalLockTurnOnSwitches${lock}${user}", "capability.switch", title: "Turn on switch(s)", required: false, multiple: true
            input "externalLockTurnOffSwitches${lock}${user}", "capability.switch", title: "Turn off switch(s)", required: false, multiple: true
            input "externalLockToggleSwitches${lock}${user}", "capability.switch", title: "Toggle switch(s)", required: false, multiple: true
            input "lockLocks${lock}${user}","capability.lock", title: "Lock lock(s)", required: false, multiple: true
            input "closeGarage${lock}${user}","capability.doorControl", title: "Close garage door(s)", required: false, multiple: true

            input "delayLockActionsTime${lock}${user}", "number", title: "Delay running actions (minutes)", required: false, range: "0..*"

            paragraph title: "Do NOT run the above lock actions for door${lock ? " $lock" : ""} under any of the following conditions", required: true, ""
            input "runXPeopleLockActions${lock}${user}", "capability.presenceSensor", title: "...when any these people are present", required: false, multiple: true
            input "runXModeLockActions${lock}${user}", "mode", title: "...when in any of these mode(s)", required: false, multiple: true

            if (!user) { // Users will use the user notify option
                paragraph "Lock Notification Options"
                input "externalLockNotify${lock}", "bool", title: "Notify on keypad lock", required: false, submitOnChange: true
                if (settings."externalLockNotify${lock}") {
                    input "externalLockNotifyModes${lock}", "mode", title: "Only when in this mode(s) (optional)", required: false, multiple: true
                }
                input "jamNotify${lock}", "bool", title: "Notify on Lock Jam/Stuck", required: false
            }
        }
    }
}

def lockManualActionsPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def lock = ""
    // Get details from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.passed) {
        lock = params.lock ?: ""
        log.trace "Passed from main page, using params lookup for lock $lock"
    } else if (atomicState.params) {
        lock = atomicState.params.lock ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for lock $lock"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    log.trace "Manual Lock Action Page, lock $lock, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"lockManualActionsPage", title: "Setup manual lock actions for doors", uninstall: false, install: false) {
        /*def phrases = location.helloHome?.getPhrases()
        phrases = phrases ? phrases*.label?.sort() - null : [] // Check for null ghost routines*/

        section ("Door Manual Lock Actions${lock ? " for $lock" : ""}") {
            //def priorLockPhrase = settings."externalLockPhraseManual${lock}"
            def priorHomeMode = settings."externalLockModeManual${lock}"

            //input "homeArmManual${lock}", "bool", title: "Arm Classic SHM to Stay", required: false
            /*input "adtArmManual${lock}", "bool", title: "Arm ADT to Stay", required: false, submitOnChange: true
            if (settings."adtArmManual${lock}") { // If we have a seleted an ADT option
                input "homeArmAwayManual${lock}", "bool", title: "...arm to Away instead of Stay", required: false
                input "adtDevices", "capability.battery", title: "Select ADT panel", multiple: false, required: true // Required if we select ADT
            }*/
            //input "externalLockPhraseManual${lock}", "enum", title: "Run routine", required: false, options: phrases, defaultValue: priorLockPhrase
            input "externalLockModeManual${lock}", "mode", title: "Change mode to", required: false, multiple: false, defaultValue: priorHomeMode
            input "externalLockTurnOnSwitchesManual${lock}", "capability.switch", title: "Turn on switch(s)", required: false, multiple: true
            input "externalLockTurnOffSwitchesManual${lock}", "capability.switch", title: "Turn off switch(s)", required: false, multiple: true
            input "lockLocksManual${lock}","capability.lock", title: "Lock lock(s)", required: false, multiple: true
            input "closeGarageManual${lock}","capability.doorControl", title: "Close garage door(s)", required: false, multiple: true

            input "delayLockActionsTimeManual${lock}", "number", title: "Delay running actions (minutes)", required: false, range: "0..*"

            paragraph title: "Do NOT run the above lock actions for door${lock ? " $lock" : ""} under any of the following conditions", required: true, ""
            input "runXPeopleLockActionsManual${lock}", "capability.presenceSensor", title: "...when any these people are present", required: false, multiple: true
            input "runXModeLockActionsManual${lock}", "mode", title: "...when in any of these mode(s)", required: false, multiple: true

            paragraph "Lock Notification Options"
            input "lockNotify${lock}", "bool", title: "Notify on manual/auto lock", required: false, submitOnChange: true
            if (settings."lockNotify${lock}") {
                input "lockNotifyModes${lock}", "mode", title: "...only when in this mode(s) (optional)", required: false, multiple: true
            }
        }
    }
}

def usersPage() {
    dynamicPage(name:"usersPage", title: "User Names, Codes and Notification Setup", uninstall: false, install: false, refreshInterval: 60) {

        if (!maxUserNames) {
            section("Invalid number of users") {
                paragraph title: "First configure the number of users on the previous page", required: true, ""
            }
        }
        
        TimeZone timeZone = location.timeZone
        if (!timeZone) {
            timeZone = TimeZone.getDefault()
            def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
            log.error msg
            sendPush msg
            section("INVALID HUB LOCATION") {
                paragraph title: msg, required: true, ""
            }
        }

        section() {
            def allUserCodes = (1..(maxUserNames ?: 0)).collectEntries { [(it):settings."userCodes${it}"] } // Get all user codes to save db access time
            for (int i = 1; i <= maxUserNames; i++) {
                def priorName = settings."userNames${i}"
                def priorCode = settings."userCodes${i}"
                def priorExpireDate = settings."userExpireDate${i}"
                def priorExpireTime = settings."userExpireTime${i}"
                def priorStartDate = settings."userStartDate${i}"
                def priorStartTime = settings."userStartTime${i}"
                def priorUserType = settings."userType${i}"
                def priorUserPresent = settings."userPresent${i}" // Get user presence
                def priorUserNotPresent = settings."userNotPresent${i}" // Get user not presence
                def priorUserModes = settings."userModes${i}" // Get user modes
                def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
                def invalidStartDate = false
                def invalidExpiryDate = false
                def userSummary = ""
                def userSlotActive = true
                def userSlotProgrammed = false
                def pendingUpdate = false
                def failedUpdate = false
                //log.trace "Initial $i Name: $priorName, Code: $priorCode, ExpireDate: $priorExpireDate, ExpireTime: $priorExpireTime, StartDate: $priorStartDate, StartTime: $priorStartTime, UserType: $priorUserType"

                // Check for errors and display messages
                if (priorCode) { // Do all the checks only if user has been configured
                    // Sanity check, codes cannot be reused in the same lock (codes have to be unique to each slot)
                    getDuplicateCodeUsers(allUserCodes, i).each { j ->
                        def msg = "CHANGE CODE - THIS CODE HAS BEEN USED FOR USER $j"
                        log.warn "CHANGE CODE FOR USER $i - THIS CODE HAS BEEN USED FOR USER $j"
                        userSummary += (userSummary ? "\n" : "") + msg
                    }

                    // Check if the user has entered a non digit string
                    if ((priorCode?.size() > 0) && !priorCode?.isNumber()) {
                        def msg = "WARNING: CODE IS NOT A NUMBER, PROGRAMMING WILL FAIL!"
                        log.warn msg
                        userSummary += (userSummary ? "\n" : "") + msg
                    }

                    // Check if the lock pin code length match the pin code length entered by the user
                    def pinDetails = getLockPinLengthDetails((locks ?: []).findAll { userLocks.contains(it?.id) })
                    def pinLen = pinDetails.pinLen // Fixed pin code length
                    def maxPinLen = pinDetails.maxPinLen // Variable minimum pin code length
                    def minPinLen = pinDetails.minPinLen // Variable maximum pin code length
                    def pinLenError = pinDetails.pinLenError
                    //log.trace "Configured lock fixed code length: $pinLen, max code length: $maxPinLen, min code length: $minPinLen"

                    for (lock in locks) {
                        if (userLocks?.contains(lock.id) && (pinLen || (maxPinLen && minPinLen))) { // Check if the lock support reporting pin length and it has a valid number to report (not 0 or null)
                            if ((priorCode?.size() > 0) && (pinLen ? pinLen != priorCode.size() : ((priorCode.size() < minPinLen) || (priorCode.size() > maxPinLen)))) { // If we have a code to program
                                def msg = "$lock IS CONFIGURED TO ACCEPT ${pinLen ?: "${minPinLen}-${maxPinLen}"} DIGIT CODES ONLY, PROGRAMMING WILL FAIL!"
                                log.warn msg
                                userSummary += (userSummary ? "\n" : "") + msg
                                break // one message is enough
                            }
                        }
                    }

                    // Sanity check for expiration date formats
                    switch (priorUserType) {
                        case 'Expire on':
                            if (priorStartDate) {
                                //log.trace "Found start date in setup"
                                try {
                                    if (!(priorStartDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                        throw new RuntimeException("Invalid date format")
                                    }
                                    def df = Date.parse("yyyy-MM-ddHH:mm", priorStartDate + "00:00") // Test it
                                    invalidStartDate = false
                                }
                                catch (Exception e) {
                                    log.warn "Invalid start date for user $i"
                                    invalidStartDate = true
                                }
                            }
                            if (priorExpireDate) {
                                //log.trace "Found expiry date in setup"
                                try {
                                    if (!(priorExpireDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                        throw new RuntimeException("Invalid date format")
                                    }
                                    def df = Date.parse("yyyy-MM-ddHH:mm", priorExpireDate + "00:00") // Test it
                                    invalidExpiryDate = false // We passed it's a valid date
                                }
                                catch (Exception e) {
                                    log.warn "Invalid expiry date for user $i"
                                    invalidExpiryDate = true
                                }
                            }

                            if (!invalidExpiryDate && !invalidStartDate) {
                                if (priorExpireDate) {
                                    def expired = false
                                    if (priorExpireTime) {
                                        // Parse the entire date/time including timezone since the Date object is converted and stored in UTC internally
                                        def exp = Date.parse("yyyy-MM-ddHH:mmZ", priorExpireDate + timeToday(priorExpireTime, timeZone).format("HH:mmZ", timeZone))
                                        if (exp.getTime() < now()) {
                                            def msg = "Code EXPIRED!"
                                            userSummary += (userSummary ? "\n" : "") + msg
                                            expired = true
                                            userSlotActive = false
                                        } else {
                                            if (priorStartDate && priorStartTime && !expired) {
                                                def start = Date.parse("yyyy-MM-ddHH:mmZ", priorStartDate + timeToday(priorStartTime, timeZone).format("HH:mmZ", timeZone))
                                                if (start.getTime() > now()) {                                                
                                                    def msg = "Activates ${start.format("EEE d MMM yy HH:mm", timeZone)}"
                                                    userSummary += (userSummary ? "\n" : "") + msg
                                                    userSlotActive = false
                                                }
                                            }
                                            def msg = "Expires ${exp.format("EEE d MMM yy HH:mm", timeZone)}"
                                            userSummary += (userSummary ? "\n" : "") + msg
                                        }
                                    }
                                }
                            } else {
                                def msg = "INVALID Date!"
                                userSummary += (userSummary ? "\n" : "") + msg
                                userSlotActive = false
                            }
                            break

                        case 'One time':
                            if (state.trackUsedOneTimeCodes?.contains(i as String)) {
                                def msg = "One time code USED!"
                                userSummary += (userSummary ? "\n" : "") + msg
                                userSlotActive = false
                            }
                            break

                        case 'Scheduled':
                        	if (!(schedulesSuffix.any { schedule -> settings."userDayOfWeek${schedule}${i}" })) { // If no schedules are defined
                                def msg = "No schedule defined!"
                                userSummary += (userSummary ? "\n" : "") + msg
                                userSlotActive = false
                            } else if (!schedulesSuffix.any { schedule -> checkSchedule(i, schedule) }) { // Check if we are outside operating schedule
                                userSlotActive = false
                            }
                        	break
                            
                        case 'Presence':
                        	if (!(priorUserPresent || priorUserNotPresent)) { // No conditions is specified
                                def msg = "No presence defined!"
                                userSummary += (userSummary ? "\n" : "") + msg
                                userSlotActive = false
                            } else if (!((priorUserPresent || priorUserNotPresent) && // No condition is true
                                (priorUserPresent ? priorUserPresent.any{it.currentPresence == "present"} : true) &&
                                (priorUserNotPresent ? priorUserNotPresent.every{it.currentPresence != "present"} : true)
                                        )) {
                                userSlotActive = false
                            }
                            break
                        
                        case 'Modes':
                            if (!priorUserModes?.find{it == location.mode}) {
                                userSlotActive = false
                            }
                            break

                        case 'Inactive':
                        	userSlotActive = false
                        	break
                            
                        case 'Permanent':
                        	break
                            
                        default:
                            def msg = "No user type selected!"
                            userSummary += (userSummary ? "\n" : "") + msg
                        	userSlotActive = false // if there's no user type, it's deleted
                            break
                    }
                    
                    if (!userSummary) { // If there are no messages or warnings then indicate user type
                        userSummary += priorUserType
                    }
                } else if (priorName) { // Incomplete configuration
                    def msg = "No code defined!"
                    userSummary += (userSummary ? "\n" : "") + msg
                    userSlotActive = false
                } else { // Not configured
                    userSlotActive = false
                }

                // Check if code has been changed and pending programming by lock
                for (lock in locks) {
                    if (userLocks?.contains(lock.id)) {
                        if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update
                            failedUpdate = true
                            break
                        } else if (userSlotActive && (state.lockCodes != null) && (state.lockCodes[lock.id]?.(i as String) != priorCode)) { // Programming pending update
                            pendingUpdate = true
                            break
                        } else if (!userSlotActive && (state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update
                            pendingUpdate = true
                            break
                        }
                    } else if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update from lock not selected
                        failedUpdate = true
                        break
                    } else if ((state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update from a lock not selected
                        pendingUpdate = true
                        break
                    }

                    if (!failedUpdate && !pendingUpdate) { // If it isn't failed/pending then it's active or inactive
                        if ((state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Still active
                            userSlotProgrammed = true
                        }
                    }
                }

                // Params for user
                def hrefParams = [
                    user: i as String,
                    passed: true 
                ]
                href(name: "userConfig${i}", params: hrefParams, title: "${priorName ?: "< empty >"}", page: "userConfigPage", description: userSummary, required: false, image: (failedUpdate ? "https://www.rboyapps.com/images/UserFailed.png" : (pendingUpdate ? "https://www.rboyapps.com/images/UserPending.png" : (userSlotProgrammed ? "https://www.rboyapps.com/images/User.png" : "https://www.rboyapps.com/images/UserInactive.png"))))
            }
        } 
    } 
}

def userConfigPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    // Get user from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.user) {
        user = params.user ?: ""
        log.trace "Passed from main page, using params lookup for user:$user"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user:$user"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""
    def i = user as Integer

    log.trace "User Codes Page, user:$user, name:$name, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"userConfigPage", title: "User Management Slot #${i}", uninstall: false, install: false) {
        TimeZone timeZone = location.timeZone
        if (!timeZone) {
            timeZone = TimeZone.getDefault()
            def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
            log.error msg
            sendPush msg
            section("INVALID HUB LOCATION") {
                paragraph title: msg, required: true, ""
            }
        }

        section() {
            def priorName = settings."userNames${i}"
            def priorCode = settings."userCodes${i}"
            def priorNotify = settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : settings."userNotify${i}" // UpdateSettings stores it as string
            def priorNotifyModes = settings."userNotifyModes${i}"
            def priorExpireDate = settings."userExpireDate${i}"
            def priorExpireTime = settings."userExpireTime${i}"
            def priorStartDate = settings."userStartDate${i}"
            def priorStartTime = settings."userStartTime${i}"
            def priorUserType = settings."userType${i}"
            def priorUserPresent = settings."userPresent${i}" // Get user presence
            def priorUserNotPresent = settings."userNotPresent${i}" // Get user not presence
            def priorUserModes = settings."userModes${i}" // Get user modes
            def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
            def invalidStartDate = false
            def invalidExpiryDate = false
            def userSlotActive = true

            log.trace "Initial $i Name: $priorName, Code: $priorCode, Notify: $priorNotify, NotifyModes: $priorNotifyModes, ExpireDate: $priorExpireDate, ExpireTime: $priorExpireTime, StartDate: $priorStartDate, StartTime: $priorStartTime, UserType: $priorUserType"

            // Check if the lock pin code length match the pin code length entered by the user
            def pinDetails = getLockPinLengthDetails((locks ?: []).findAll { userLocks.contains(it?.id) })
            def pinLen = pinDetails.pinLen // Fixed pin code length
            def maxPinLen = pinDetails.maxPinLen // Variable minimum pin code length
            def minPinLen = pinDetails.minPinLen // Variable maximum pin code length
            def pinLenError = pinDetails.pinLenError
            log.trace "Configured lock fixed code length: $pinLen, max code length: $maxPinLen, min code length: $minPinLen"

            // Check for errors and display messages
            if (priorCode) { // Do all the checks only if user has been configured
                // Sanity check, codes cannot be reused in the same lock (codes have to be unique to each slot)
                def allUserCodes = (1..(maxUserNames ?: 0)).collectEntries { [(it):settings."userCodes${it}"] } // Get all user codes to save db access time
                getDuplicateCodeUsers(allUserCodes, i).each { j ->
                    log.warn "CHANGE CODE FOR USER $i - THIS CODE HAS BEEN USED FOR USER $j"
                    paragraph title: "CHANGE CODE - THIS CODE HAS BEEN USED FOR USER $j", required: true, ""
                }

                // Check if the user has entered a non digit string
                if ((priorCode?.size() > 0) && !priorCode?.isNumber()) {
                    def msg = "WARNING: CODE IS NOT A NUMBER, PROGRAMMING WILL FAIL!"
                    paragraph title: msg, required: true, ""
                }

                // Check if the lock pin code length match the pin code length entered by the user
                for (lock in locks) {
                    if (userLocks?.contains(lock.id) && (pinLen || (maxPinLen && minPinLen))) { // Check if the lock support reporting pin length and it has a valid number to report (not 0 or null)
                        if ((priorCode?.size() > 0) && (pinLen ? pinLen != priorCode.size() : ((priorCode.size() < minPinLen) || (priorCode.size() > maxPinLen)))) { // If we have a code to program
                            def msg = "$lock IS CONFIGURED TO ACCEPT ${pinLen ?: "${minPinLen}-${maxPinLen}"} DIGIT CODES ONLY, PROGRAMMING WILL FAIL!"
                            paragraph title: msg, required: true, ""
                            break // one message is enough
                        }
                    }
                }
                
                // Sanity check for expiration date formats
                switch (priorUserType) {
                    case 'Expire on':
                        if (priorStartDate) {
                            //log.trace "Found start date in setup"
                            try {
                                if (!(priorStartDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                    throw new RuntimeException("Invalid date format")
                                }
                                def df = Date.parse("yyyy-MM-ddHH:mm", priorStartDate + "00:00") // Test it
                                log.trace "Start:" + df.format("EEE MMM dd yyyy")
                                invalidStartDate = false
                            }
                            catch (Exception e) {
                                log.warn "Invalid start date in setup"
                                invalidStartDate = true
                            }
                        }
                        if (priorExpireDate) {
                            //log.trace "Found expiry date in setup"
                            try {
                                if (!(priorExpireDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                    throw new RuntimeException("Invalid date format")
                                }
                                def df = Date.parse("yyyy-MM-ddHH:mm", priorExpireDate + "00:00") // Test it
                                log.trace "Expire:" + df.format("EEE MMM dd yyyy")
                                invalidExpiryDate = false // We passed it's a valid date
                            }
                            catch (Exception e) {
                                log.warn "Invalid expiry date in setup"
                                invalidExpiryDate = true
                            }
                        }

                        if (!invalidExpiryDate && !invalidStartDate) {
                            if (priorExpireDate) {
                                def expired = false
                                if (priorExpireTime) {
                                    // Parse the entire date/time including timezone since the Date object is converted and stored in UTC internally
                                    def exp = Date.parse("yyyy-MM-ddHH:mmZ", priorExpireDate + timeToday(priorExpireTime, timeZone).format("HH:mmZ", timeZone))
                                    if (exp.getTime() < now()) {
                                        paragraph title: "Code EXPIRED!", required: true, ""
                                        expired = true
                                        userSlotActive = false
                                    } else {
                                        if (priorStartDate && priorStartTime && !expired) {
                                            def start = Date.parse("yyyy-MM-ddHH:mmZ", priorStartDate + timeToday(priorStartTime, timeZone).format("HH:mmZ", timeZone))
                                            if (start.getTime() > now()) {
                                                def startStr = start.format("EEE MMM dd yyyy HH:mm z", timeZone)
                                                paragraph title: "Code activates on ${startStr}", required: true, ""
                                                userSlotActive = false
                                            }
                                        }
                                    }
                                }
                            }
                        } else {
                            paragraph title: "INVALID Date!", required: true, ""
                            userSlotActive = false
                        }
                        break

                    case 'One time':
                        if (state.trackUsedOneTimeCodes?.contains(i as String)) {
                            def msg = "One time code USED!"
                            paragraph title: msg, required: true, ""
                            userSlotActive = false
                        }
                        break

                    case 'Scheduled':
                        if (!(schedulesSuffix.any { schedule -> settings."userDayOfWeek${schedule}${i}" })) { // If no schedules are defined
                            def msg = "No schedule defined!"
                            paragraph title: msg, required: true, ""
                            userSlotActive = false
                        } else if (!schedulesSuffix.any { schedule -> checkSchedule(i, schedule) }) { // Check if we are outside operating schedule
                            userSlotActive = false
                        }
                        break

                    case 'Presence':
                        if (!(priorUserPresent || priorUserNotPresent)) { // No conditions is specified
                            def msg = "No presence defined!"
                            paragraph title: msg, required: true, ""
                            userSlotActive = false
                        } else if (!((priorUserPresent || priorUserNotPresent) && // No condition is true
                                     (priorUserPresent ? priorUserPresent.any{it.currentPresence == "present"} : true) &&
                                     (priorUserNotPresent ? priorUserNotPresent.every{it.currentPresence != "present"} : true)
                                    )) {
                            userSlotActive = false
                        }
                        break

                    case 'Modes':
                        if (!priorUserModes?.find{it == location.mode}) {
                            userSlotActive = false
                        }
                        break

                    case 'Inactive':
                        userSlotActive = false
                        break

                    case 'Permanent':
        	            break

                    default:
                        def msg = "No user type selected!"
                        paragraph title: msg, required: true, ""
	                    userSlotActive = false // if there's no user type, it's deleted
    	                break
                }
            } else if (priorName) { // Incomplete configuration
                def msg = "No code defined!"
                paragraph title: msg, required: true, ""
                userSlotActive = false
            } else { // Not configured
                userSlotActive = false
            }

            // Check if code has been changed and pending programming by lock
            for (lock in locks) {
                if (userLocks?.contains(lock.id)) {
                    if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update
                        def msg = "No response from $lock"
                        paragraph title: msg, required: true, ""
                    } else if (userSlotActive && (state.lockCodes != null) && (state.lockCodes[lock.id]?.(i as String) != priorCode)) { // Programming pending update
                        def msg = "Pending addition confirmation from $lock"
                        paragraph msg
                    } else if (!userSlotActive && (state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update
                        def msg = "Pending deletion confirmation from $lock"
                        paragraph msg
                    }
                } else if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update from lock not selected
                    def msg = "No response from $lock"
                    paragraph title: msg, required: true, ""
                } else if ((state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update from a lock not selected
                    def msg = "Pending deletion confirmation from $lock"
                    paragraph msg
                }
            }

            // User and code details/types
            input "userNames${i}", "text", description: "Tap to set", title: "Name", multiple: false, required: (settings."userCodes${i}" ? true : false), submitOnChange: false, image: "https://www.rboyapps.com/images/UserPage.png"
            input "userCodes${i}", "text", description: "Tap to set", title: "Code${pinLen ? " (${pinLen} digits)" : ((minPinLen && maxPinLen) ? " (${minPinLen}-${maxPinLen} digits)" : "")}", multiple: false, required: false, submitOnChange: true, image: "https://www.rboyapps.com/images/Code.png" // Input it type text otherwise users can't enter the number starting with 0

            // Lock selection
            if (locks?.size() > 1) {
                input "userLocks${i}", "enum", description: "All locks", title: "Only on these lock(s)", options: selectLocks, multiple: true, required: false, image: "https://www.rboyapps.com/images/HandleLock.png"
            }

            // User Type (Permanent, One Time, Scheduled, etc)
            input "userType${i}", "enum", title: "Select User Type", required: true, multiple: false, options: codeOptions, defaultValue: 'Permanent', submitOnChange: true, image: "https://www.rboyapps.com/images/Schedule.png"

            // Expiration/Scheduling options
            switch (priorUserType) {
                case 'Expire on':
                    if (invalidStartDate == true) {
                        paragraph title: "INVALID START DATE - PLEASE CHECK YOUR DATE FORMAT", required: true, ""
                    }
                    input "userStartDate${i}", "text", title: "...code start date (YYYY-MM-DD) (optional)", description: "date on which the code should be enabled", required: false,  submitOnChange: true
                    if (priorStartDate) {
                        input "userStartTime${i}", "time", title: "...code start time", description: "the code would be enabled within 2 minutes of this time", required: true,  submitOnChange: false
                    }
                    if (invalidExpiryDate == true) {
                        paragraph title: "INVALID EXPIRY DATE - PLEASE CHECK YOUR DATE FORMAT", required: true, ""
                    }
                    input "userExpireDate${i}", "text", title: "...code expiration date (YYYY-MM-DD)", description: "date on which the code should be deleted", defaultValue: (new Date(now())).format("yyyy-MM-dd", timeZone), required: true, submitOnChange: true
                    input "userExpireTime${i}", "time", title: "...code expiration time", description: "the code would be deleted within 2 minutes of this time", required: true, submitOnChange: false
                    break

                case 'Scheduled':
                    // 3 schedule options for each user
                    schedulesSuffix.each { schedule ->
                        def hrefParams = [
                            user: i as String,
                            schedule: schedule,
                            passed: true
                        ]
                        href(name: "schedule${schedule}", params: hrefParams, title: "...click here to define schedule ${schedule}", page: "scheduleCodesPage", description: getUserScheduleDescription(i, schedule, timeZone), required: false)
                    }
                    break

                case 'Presence':
                    input "userPresent${i}", "capability.presenceSensor", title: "...if any these people are present", description: "code should be active when any of these people are present", required: false, multiple: true
                    input "userNotPresent${i}", "capability.presenceSensor", title: "...and none of these people are present", description: "when all these people are not present", required: false, multiple: true
                    input "userPresenceLock${i}", "bool", title: "...lock automatically", description: "lock doors when deactivating user", required: false
                    input "userPresenceUnlock${i}", "bool", title: "...unlock automatically", description: "unlock doors when activating user", required: false
                    break

                case 'Modes':
                    input "userModes${i}", "mode", title: "...when in this mode(s)", description: "code should be active only during these modes", required: true, multiple: true
                    break

                default:
                    break
            }

            // Notifications for each user
            input "userNotify${i}", "bool", title: "Notify on use", defaultValue: true, required: false, submitOnChange: true, image: "https://www.rboyapps.com/images/Notifications.png"
            if (priorNotify != false) {
                input "userNotifyUseCount${i}", "number", title: "...limit to only this many times", description: "no limit", required: false, range: "1..*"
                input "userNotifyModes${i}", "mode", title: "...only when in this mode(s)", description: "notify only when in any of these modes", required: false, multiple: true
                input "userXNotifyPresence${i}", "capability.presenceSensor", title: "...and none of these people are present", description: "when all these people are not present", required: false, multiple: true
            }

            // Unlock actions for each user
            def hrefParams = [
                user: i as String, 
                passed: true 
            ]
            href(name: "unlockLockActions", params: hrefParams, title: "Custom actions/notifications", page: "unlockLockActionsPage", description: (settings."userOverrideUnlockActions${user}" || (settings."userOverrideNotifications${user}" && (settings."userNotify${user}" ? settings."userNotify${user}".toBoolean() : settings."userNotify${user}"))) ? "Configured" : "", required: false, image: "https://www.rboyapps.com/images/LockUnlock.png")
        }
    }
}

private getSelectLocks() {
    return (locks?.collectEntries { [ (it.id) : (it.displayName) ] })?.sort { it.value.toLowerCase() } // Get lock_id:lock_name and sort by name
}

private getUserScheduleDescription(i, schedule, timeZone) {
    def retVal = "Not defined"
    if (settings."userDayOfWeek${schedule}${i}") {
        retVal = ""
        settings."userDayOfWeek${schedule}${i}".each { retVal += (retVal ? ", " : "") + it }// DOW
        retVal += ": " + (settings."userStartTime${schedule}${i}" ? timeToday(settings."userStartTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : "") // Start Time
        retVal += " - " + (settings."userEndTime${schedule}${i}" ? timeToday(settings."userEndTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : "") // EndTime
    }
    return retVal
}

def scheduleCodesPage(params) {
    //  params is broken, after doing a submitOnChange on this page, params is lost. So as a work around when this page is called with params save it to state and if the page is called with no params we know it's the bug and use the last state instead
    if (params.passed) {
        atomicState.params = params // We got something, so save it otherwise it's a page refresh for submitOnChange
    }

    def user = ""
    def schedule = ""
    // Get user from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.user) {
        user = params.user ?: ""
        log.trace "Passed from main page, using params lookup for user $user"
    } else if (atomicState.params) {
        user = atomicState.params.user ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for user $user"
    } else {
        log.error "Invalid params, no user found. Params: $params, saved params: $atomicState.params"
    }
    
    def name = user ? settings."userNames${user}" : ""

    // Get schedule from the passed in params when the page is loading, else get from the last saved to work around not having params on pages
    if (params.schedule) {
        schedule = params.schedule ?: ""
        log.trace "Passed from main page, using params lookup for schedule $schedule"
    } else if (atomicState.params) {
        schedule = atomicState.params.schedule ?: ""
        log.trace "Passed from submitOnChange, atomicState lookup for schedule $schedule"
    } else {
        log.error "Invalid params, no schedule found. Params: $params, saved params: $atomicState.params"
    }

    log.trace "Schedule Codes Page, schedule:$schedule, user:$user, name:$name, passed params: $params, saved params:$atomicState.params"

    dynamicPage(name:"scheduleCodesPage", title: "Define schedule ${schedule}" + (user ? " for user $name." : ""), uninstall: false, install: false) {
        section() {
            def i = user as Integer
            def priorUserDayOfWeek = settings."userDayOfWeek${schedule}${i}"
            def priorUserStartTime = settings."userStartTime${schedule}${i}"
            def priorUserEndTime = settings."userEndTime${schedule}${i}"
            log.trace "Schedule:$schedule, User:$i, Name: $name, UserDayOfWeek: $priorUserDayOfWeek, UserStartTime: $priorUserStartTime, UserEndTime: $priorUserEndTime"

            input "userStartTime${schedule}${i}", "time", title: "Start Time", required: false
            input "userEndTime${schedule}${i}", "time", title: "End Time", required: false
            input "userDayOfWeek${schedule}${i}",
                "enum",
                title: "Which day of the week?",
                description: "Not defined",
                required: false,
                multiple: true,
                options: schedulingOptions
        }
    }
}

// Maximum number of codes supports by the locks (Maximum Common Number)
private getMaxCodes() {
    def maxCommonCodes = 0
    for (lock in locks) {
        def lockMax = (lock.hasAttribute("maxCodes") ? lock.currentValue("maxCodes") : 0) as Integer
        //log.trace "$lock has max users: $lockMax"
        maxCommonCodes = maxCommonCodes ? (lockMax ? Math.min(lockMax, maxCommonCodes) as Integer : maxCommonCodes) : (lockMax ?: 0) // Take the least amongst all selected locks
    }
    
    //log.trace "Max users: $maxCommonCodes"
    return maxCommonCodes
}

// Check if the lock pin code length match on all the locks
// pinLen - Fixed pin code length
// maxPinLen - Variable minimum pin code length
// minPinLen - Variable maximum pin code length
// pinLenError - true / false
private getLockPinLengthDetails(subLocks = locks) {
    def pinLen = null // Fixed pin code length
    def maxPinLen = null // Variable minimum pin code length
    def minPinLen = null // Variable maximum pin code length
    def pinLenError = false

    for (lock in subLocks) {
        def codeLen = (lock.currentValue("codeLength") ?: (lock.currentValue("pinLength") ?: null)) as Integer
        def maxCodeLen = (lock.currentValue("maxCodeLength") ?: (lock.currentValue("maxPINLength") ?: null)) as Integer
        def minCodeLen = (lock.currentValue("minCodeLength") ?: (lock.currentValue("minPINLength") ?: null)) as Integer
        //log.trace "$lock fixed code length: $codeLen, max code length: $maxCodeLen, min code length: $minCodeLen"
        if (codeLen && pinLen) { // If lock has fixed pin length and previous lock also had fixed pin length
            if ((codeLen != pinLen) || (maxPinLen && (codeLen > maxPinLen)) || (minPinLen && (codeLen < minPinLen))) { // Check if we have pin mismatches
                pinLenError = true // All locks must have the same pinLength
            }
        } else if (codeLen) { // If lock has fixed pin length
            pinLen = codeLen // Save the length for future use
        } else if (minCodeLen && maxCodeLen) { // Check for range validation
            if (!minPinLen || (minCodeLen > minPinLen)) {
                minPinLen = minCodeLen
            }
            if (!maxPinLen || (maxCodeLen < maxPinLen)) {
                maxPinLen = maxCodeLen
            }
        }
    }
    
    return [ pinLen: pinLen, maxPinLen: maxPinLen, minPinLen: minPinLen, pinLenError: pinLenError ]
}


def uninstalled() {
    log.debug "Uninstall called"
    authUpdate("uninstall")
}

def installed() {
    log.debug "Install Settings: $settings"
    authUpdate("install")
    state.sendUpdate = false
    runIn(1, appTouch) // The platform calls update after installed, so avoid a duplicate run
}

def updated() {
    log.debug "Update Settings: $settings"
    if (state.sendUpdate) {
        authUpdate("update")
        state.sendUpdate = false
    }
    runIn(1, appTouch)
}

def appTouch() {
    state.clientVersion = clientVersion() // Update our local stored client version to detect code upgrades
    
    unschedule() // clear all pending updates
    unsubscribe()

    // Did the user forget to generate an API URL?
    if (locks && !getCallBackURL()) { // If we have the app configured check for callback URL
        def msg = "Did you forget to generate an API URL? Tap 'Configure API' in the app to generate an API URL"
        sendNotifications(msg)
    }
    
    // Sanity check, codes cannot be reused in the same lock (codes have to be unique to each slot)
    def allUserCodes = (1..(maxUserNames ?: 0)).collectEntries { [(it):settings."userCodes${it}"] } // Get all user codes to save db access time
    for (int i = 1; i <= maxUserNames; i++) {
        def code1 = allUserCodes[i]
        getDuplicateCodeUsers(allUserCodes, i).each { j ->
            def name1 = settings."userNames${i}"
            def name2 = settings."userNames${j}"
            def code2 = allUserCodes[j]
            def msg = "CHANGE CODE - USER $name1 IN SLOT $i and USER $name2 IN SLOT $j SHARE THE SAME CODE $code1"
            log.error msg
            sendNotifications(msg)
        }
        
        // Check if the user has entered a non digit string
        if ((code1?.size() > 0) && !code1?.isNumber()) {
            def name1 = settings."userNames${i}"
            def msg = "CODE IS NOT A NUMBER, PROGRAMMING WILL FAIL - USER $name1 IN SLOT $i DOES NOT CONTAIN A NUMERIC PIN"
            log.error msg
            sendNotifications(msg)            
        }
        
        // Check if the lock pin code length match the pin code length entered by the user
        def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
        for (lock in locks) {
            def codeLen = (lock.currentValue("codeLength") ?: (lock.currentValue("pinLength") ?: null)) as Integer
            def maxCodeLen = (lock.currentValue("maxCodeLength") ?: (lock.currentValue("maxPINLength") ?: null)) as Integer
            def minCodeLen = (lock.currentValue("minCodeLength") ?: (lock.currentValue("minPINLength") ?: null)) as Integer
            if (userLocks?.contains(lock.id) && (codeLen || (maxCodeLen && minCodeLen))) { // Check if the lock support reporting pin length and it has a valid number to report (not 0 or null)
                if ((code1?.size() > 0) && (codeLen ? codeLen != code1.size() : ((code1.size() < minCodeLen) || (code1.size() > maxCodeLen)))) { // If we have a code to program
                    def name1 = settings."userNames${i}"
                    def msg = "CODE LENGTH DOES NOT MATCH $lock PROGRAMMING LENGTH, PROGRAMMING WILL FAIL - USER $name1 IN SLOT $i REQUIRES ${codeLen ?: "${minCodeLen}-${maxCodeLen}"} DIGITS FOR LOCK ${lock}"
                    log.error msg
                    sendNotifications(msg)
                }
            }
        }
    }

    // Initialize when we are going to check for code version updates
    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }
    def random = new Random()
    Integer randomHour = random.nextInt(18-10) + 10
    Calendar localCalendar = Calendar.getInstance(timeZone)
    localCalendar.set(Calendar.DAY_OF_WEEK, (new Date(now()))[Calendar.DAY_OF_WEEK]) // Starting today
    localCalendar.set(Calendar.HOUR_OF_DAY, randomHour) // Check for code updates everyday at a random time between 10am and 6pm
    localCalendar.set(Calendar.MINUTE, 3) // Offset to avoid ST platform timeout issue at top of hour
    localCalendar.set(Calendar.SECOND, 0)
    localCalendar.set(Calendar.MILLISECOND, 0)
    if (localCalendar.getTimeInMillis() < now()) { // If it's in the past add one day to it
        localCalendar.add(Calendar.DAY_OF_YEAR, 1)
    }
    state.nextCodeUpdateCheck = state.nextCodeUpdateCheck ?: localCalendar.getTimeInMillis() // If it's already set then don't update it
    log.debug "Checking for next app update after ${(new Date(state.nextCodeUpdateCheck)).format("EEE MMM dd yyyy HH:mm z", timeZone)}"
    
    // subscribe to events to kick start timers and presence/mode events to update code states
    subscribe(location, "mode", changeHandler)
    subscribe(app, changeHandler) // Capture user intent to reinitialize timers
    def presence = []// subscribe to presence
    for (int i = 1; i <= maxUserNames; i++) {
		if (settings."userType${i}" == "Presence") {
        	presence = (presence + (settings."userPresent${i}" ?: []) + (settings."userNotPresent${i}" ?: [])).unique()
        }
    }
    log.trace "Subscribing to people: $presence"
    subscribe(presence, "presence", changeHandler)

    subscribe(locks, "lock", lockHandler) // Subscribe to lock events to take action as defined as user
    subscribe(locks, "tamper", lockHandler) // Subscribe to tamper events
    subscribe(locks, "codeReport", codeResponse, [filterEvents:false]) // Subscribe to code report events to see if the code update was successful
    subscribe(locks, "codeChanged", codeResponse, [filterEvents:false]) // Subscribe to code report events to see if the code update was successful
    //subscribe(location, "alarmSystemStatus" , shmChangeHandler) // Subscribe to SHM state handler
    /*if (adtDevices) {
        subscribe(adtDevices, "securitySystemStatus" , adtChangeHandler) // Subscribe to ADT state handler
    }*/

    // Reset the code update trackers and heartbeat system
    state.lastCheck = 0
    state.lastHeartBeat = 0

    locks.each { lock -> // check each lock individually
        if (settings."sensor${lock}") {
            log.trace "Subscribing to sensor ${settings."sensor${lock}"} for ${lock}"
            subscribe(settings."sensor${lock}", "contact", sensorHandler)
        }
        if (lock.hasAttribute('invalidCode')) {
            log.trace "Found attribute 'invalidCode' on $lock, enabled support for invalid code detection"
            subscribe(lock, "invalidCode", lockHandler)
        }
    }

    state.usedOneTimeCodes = [:]
    state.trackUsedOneTimeCodes = [] // Track for reporting purposes
    state.retryCodeCount = [:] // Number of times a code programming has been retried
    state.codeUseCount = [:] // Number of times codes were used
    if (!state.lockCodes) {
        state.lockCodes = [:] // Save list of programmed codes, initialize only if not already done
    }
    state.expiredLockList = []
    atomicState.reLocks = [:] // List of lock to relock after a timed delay
    atomicState.notifyOpenDoors = [:] // List of locks to check for open notifications
    atomicState.immediateLocks = [] // List of lock to lock immediately after a short delay
    atomicState.unLocks = [] // List of lock to unlock after a short delay
    for (lock in locks) {
        state.codeUseCount[lock.id] = [:] // Number of times a code usage was used for this lock
        state.usedOneTimeCodes[lock.id] = [] // List of used one time codes for this lock
        state.retryCodeCount[lock.id] = [:] // Number of times a code programming has been retried for the lock
        if (!state.lockCodes[lock.id]) {
            state.lockCodes[lock.id] = [:] /// Track programmed codes for this lock, initialize only if not already done
        }
        state.expiredLockList.add(lock.id) // reset the state for each lock to be processed with expired
        //log.trace "Added $lock id ${lock.id} to expire list ${state.expiredLockList}"
    }
    state.lockCodes.each { lockID, userMap ->
        if (!locks?.any { lock -> lock.id == lockID }) {
            log.debug "Lock with ID ${lockID} is no longer being programmed, stop tracking users from the lock"
            state.lockCodes[lockID] = [:] /// Stop tracking codes from this lock once we exclude the lock from our main list
        }
    }        
    state.expiredNextCode = 1 // set next code to be set for the expired loop

    log.trace "Install complete"

    if (clearUserCodes) {
        clearAllCodes()
    } else {
        kickStart() // Initialize codes
    }
}

// Handle changes, reinitialize the code check timers after a change, this is to workaround the issue of a buggy ST platform where the timers die randomly for some users
def changeHandler(evt) {
    log.trace "Reinitializing code check timer on event notification, name: ${evt?.name}, value: ${evt?.value}, device: ${evt?.device}"
    
    if (evt?.name == "mode") { // Mode change notification
        for (lock in locks) { // Check all locks
            def sensor = settings."sensor${lock}" // Find the lock for this sensor, match by ID and not objects
            if (sensor) {
                log.trace "Checking for any pending door sensor activites that need to be done for lock $lock with sensor $sensor in mode ${evt.value}"
                def sensorEvt = [name: sensor.name, displayName: sensor.displayName, value: sensor.latestValue("contact"), device: sensor]
                sensorHandler(sensorEvt)
            }
        }
    }

    if (evt?.name == "presence") { // User arrives/leaves
        log.trace "Checking for presence ${evt?.device} actions"
        def msgs = [:]
        for (int i = 1; i <= maxUserNames; i++) {
            def code = settings."userCodes${i}" as String
            def type = settings."userType${i}"
            def userPresent = settings."userPresent${i}"
            def userNotPresent = settings."userNotPresent${i}"
            def presenceLock = settings."userPresenceLock${i}"
            def presenceUnlock = settings."userPresenceUnlock${i}"
            if ((code != null) && (type == "Presence") && (presenceLock || presenceUnlock) && ((userPresent?.any { evt?.device?.id == it.id }) || (userNotPresent?.any { evt?.device?.id == it.id }))) { // Find all programmed users controlled by presence and need to lock/unlock on presence
                def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
                def name = settings."userNames${i}" // Get the name for the slot
                def doAdd = false
                // Any of the 'present' users AND none of the 'not present' users are there then the code is active so unlock OR lock as required
                if ((userPresent ? userPresent.any{it.currentPresence == "present"} : true) &&
                    (userNotPresent ? userNotPresent.every{it.currentPresence != "present"} : true)
                   ) {
                    doAdd = true
                } else {
                    doAdd = false
                }
                
                for (lock in locks) {
                    if (userLocks.contains(lock.id)) {
                        if (!doAdd && presenceLock) {
                            def msg = "Locking ${lock} for user ${name} because ${evt.device.displayName} ${evt.value == "present" ? "arrived" : "left"}"
                            if (lock.currentValue("lock") != "locked") {
                                log.info msg
                                msgs += [ "${msg}" : (settings."userOverrideNotifications${i}" && settings."userNotify${i}") ? i as String : "" ] // TODO: For now ALWAYS notify if locking/unlocking for security reasons, can use custom notifications settings
                                lock.lock()
                            } else {
                                log.debug "${lock} already locked, skipping ${msg}"
                            }
                        } else if (doAdd && presenceUnlock) {
                            def msg = "Unlocking ${lock} for user ${name} because ${evt.device.displayName} ${evt.value == "present" ? "arrived" : "left"}"
                            if (lock.currentValue("lock") != "unlocked") {
                                log.info msg
                                msgs += [ "${msg}" : (settings."userOverrideNotifications${i}" && settings."userNotify${i}") ? i as String : "" ] // TODO: For now ALWAYS notify if locking/unlocking for security reasons, can use custom notifications settings
                                lock.unlock()
                            } else {
                                log.debug "${lock} already unlocked, skipping ${msg}"
                            }
                        }
                    }
                }
            }
        }
        // Last thing to do because it can timeout
        msgs.each { msg, user ->
            sendNotifications(msg, user)
        }
    }

    // Do a code check and restart the scheduler if required
    // Reset the lock list and start from 1st code in first lock and check all codes
    state.expiredLockList = []
    state.expiredNextCode = 1 // reset back to 1 for the next lock
    for (lock in locks) {
        state.expiredLockList.add(lock.id) // reset the state for each lock to be processed
        //log.trace "Added $lock id ${lock.id} back to unprocessed locks list ${state.expiredLockList}"
    }
    
    kickStart()
}

// Handle changes to ADT states
def adtChangeHandler(evt) {
    log.trace "ADT state change notification, name: ${evt?.name}, value: ${evt?.value}"

    def msg = ""
    def keypads = locks?.findAll{ it.hasAttribute("armMode") } // Get all keypads and sync state with ADT
    // We don't check for individual user custom actions for keypads since synchronization needs to happen at the keypad level
    keypads = (settings."individualDoorActions${""}" ? keypads.findAll { keypad -> (settings."keypadArmDisarm${keypad}${""}") } : (settings."keypadArmDisarm${""}${""}" ? keypads : null)) // Get keypads with direct control enabled
    def mode = settings."adtDevices"?.currentState("securitySystemStatus")?.value // This should the new ADT state
    if (keypads) {
        switch (mode) {
            case "armedAway":
                msg = "Detected ADT mode change, setting $keypads to Armed Away"
                keypads*.setArmedAway()
                break	

            case "armedStay":
                msg = "Detected ADT mode change, setting $keypads to Armed Stay"
                keypads*.setArmedStay()
                break

            case "disarmed":
                msg = "Detected ADT mode change, setting $keypads to Disarmed"
                keypads*.setDisarmed()
                break

            default:
                log.error "Unknown ADT mode $mode"
                break
        }
    } else {
        log.trace "No keypads found under direct ADT control"
    }
    
    if (keypads && msg) {
        log.info msg
    }
}

// Handle changes to SHM states
def shmChangeHandler(evt) {
    log.trace "SHM state change notification, name: ${evt?.name}, value: ${evt?.value}"

    def msg = ""
    def keypads = locks?.findAll{ it.hasAttribute("armMode") } // Get all keypads and sync state with SHM
    // We don't check for individual user custom actions for keypads since synchronization needs to happen at the keypad level
    keypads = (settings."individualDoorActions${""}" ? keypads.findAll { keypad -> (settings."keypadArmDisarm${keypad}${""}") } : (settings."keypadArmDisarm${""}${""}" ? keypads : null)) // Get keypads with direct control enabled
    def mode = location.currentState("alarmSystemStatus")?.value // This should the new SHM state
    if (keypads) {
        switch (mode) {
            case "away":
                msg = "Detected SHM mode change, setting $keypads to Armed Away"
                keypads*.setArmedAway()
                break	

            case "stay":
                msg = "Detected SHM mode change, setting $keypads to Armed Stay"
                keypads*.setArmedStay()
                break

            case "off":
                msg = "Detected SHM mode change, setting $keypads to Disarmed"
                keypads*.setDisarmed()
                break

            default:
                log.error "Unknown SHM mode $mode"
                break
        }
    } else {
        log.trace "No keypads found under direct SHM control"
    }
    
    if (keypads && msg) {
        log.info msg
    }
}

def sensorHandler(evt) {
    log.trace "Event name $evt.name, value $evt.value, device $evt.displayName"

    def sensor = evt.device

    def lock = locks.find { settings."sensor${it}"?.id == sensor.id } // Find the lock for this sensor, match by ID and not objects
    log.trace "Sensor ${sensor} belongs to Lock ${lock}"

    if (evt.value == "closed") { // Door was closed
        if (lock && settings."relockDoor${lock}" && (settings."relockDoorModes${lock}" ? settings."relockDoorModes${lock}".find{it == location.mode} : true)) { // Are we asked to reLock this door
            if (lock.hasAttribute('autolock') && (lock.latestValue("autolock") == "enabled")) {
                log.warn "Disable AutoLock on physical lock to use SmartApp AutoReLock and AutoUnlock features"
            } else {
                if (settings."relockImmediate${lock}") {
                    log.debug "Relocking ${lock} immediately in 3 seconds"
                    def immediatelocks = atomicState.immediateLocks ?: [] // We need to deference the atomicState object each time and it may contain a null if it's empty so we need to allocate a new object, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                    if (!immediatelocks.contains(lock.id)) { // Don't re add the same lock again
                        //log.trace "Adding ${lock.id} to the list of immediate locks"
                        immediatelocks.add(lock.id) // Atomic to ensure we get upto date info here
                        atomicState.immediateLocks = immediatelocks // Set it back, we can't work direct on atomicState
                    }
                    immediateLockDoor() // Lock it right away
                } else if (settings."relockAfter${lock}") {
                    log.debug "Scheduling ${lock} to lock in ${settings."relockAfter${lock}"} minutes"
                    def reLocks = atomicState.reLocks ?: [:] // We need to deference the atomicState object each time and it may contain a null if it's empty so we need to allocate a new object, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                    //log.trace "Adding ${lock.id} to the list of relocks"
                    reLocks[lock.id] = now() // Atomic to ensure we get upto date info here, Update and Add work the same way here so we don't need to check before adding/updating
                    atomicState.reLocks = reLocks // Set it back, we can't work direct on atomicState
                    reLockDoor() // Call relock door it'll take of delaying the lock as required
                } else {
                    log.error "Invalid configuration, no relock timeout defined"
                }
            }
        }
    } else { // Door was opened
        // Chime bell
        if (settings."openNotifyBeep${lock}") {
            if (!settings."openNotifyModes${lock}" || (settings."openNotifyModes${lock}"?.find{it == location.mode})) {
                log.debug "Door ${sensor} was opened, chiming bell ${settings."openNotifyBeep${lock}"}"
                settings."openNotifyBeep${lock}".beep() // Beep
            } else {
                log.trace "${lock} chiming not set for Mode ${location.mode}"
            }
        }

        // Notify user
        if (settings."openNotify${lock}") {
            if (!settings."openNotifyModes${lock}" || (settings."openNotifyModes${lock}"?.find{it == location.mode})) {
                log.debug "Scheduling ${lock} to notify user of open door in ${settings."openNotifyTimeout${lock}"} minutes"
                //log.trace "Updating ${lock.id} timestamp in the list of notifyOpenDoors"
                def notifyOpenDoors = atomicState.notifyOpenDoors ?: [:] // We need to deference the atomicState object each time and it may contain a null if it's empty so we need to allocate a new object, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                notifyOpenDoors[lock.id] = now() // Atomic to ensure we get upto date info here, Update and Add work the same way here so we don't need to check before adding/updating
                atomicState.notifyOpenDoors = notifyOpenDoors // Set it back, we can't work direct on atomicState
                notifyOpenDoor() // Notify, it'll take of delaying it if it's too soon
            } else {
                log.trace "${lock} open notification not set for Mode ${location.mode}"
            }
        }
    }
}

// Check for any pending door unlocks
def unLockDoor() {
    def unLocksIDs = atomicState.unLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
    log.trace "Pending door unlocks ${unLocksIDs}"

    unLocksIDs?.each { lockid ->
        def lock = locks.find { it.id == lockid } // find the lock
        log.info "UnLocking the door ${lock} immediately"
        lock.unlock() // unlock it
        def unlocks = atomicState.unLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
        //log.trace "Removing ${lockid} from the list of pending unlocks"
        unlocks.remove(lockid) // We are done with this lock, remove it from the list
        atomicState.unLocks = unlocks // set it back to atomicState
        //log.trace "Checking for any pending door unlocks in 3 seconds"
        startTimer(3, unLockDoor) // Next immediate door lock in 3 seconds (give it some time for the mesh network)
        return // We're done here
    }
}

// Check for any pending immediate door locks
def immediateLockDoor() {
    def immediateLocksIDs = atomicState.immediateLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
    log.trace "Pending immediate door locks ${immediateLocksIDs}"

    immediateLocksIDs?.each { lockid ->
        def lock = locks.find { it.id == lockid } // find the lock
        log.info "Locking the door ${lock} immediately"
        lock.lock() // lock it
        def immediatelocks = atomicState.immediateLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
        //log.trace "Removing ${lockid} from the list of pending immediate locks"
        immediatelocks.remove(lockid) // We are done with this lock, remove it from the list
        atomicState.immediateLocks = immediatelocks // set it back to atomicState
        //log.trace "Checking for any pending immediate door locks in 3 seconds"
        startTimer(3, immediateLockDoor) // Next immediate door lock in 3 seconds (give it some time for the mesh network)
        return // We're done here
    }
}

// Check for any pending delayed door relocks
def reLockDoor() {
    def reLocksIDs = atomicState.reLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
    log.trace "Checking door sensor state and relocking ${reLocksIDs}"

    Long shortestPendingTime = 0 // in seconds
    
    reLocksIDs?.each { lockid, timestamp ->
        def lock = locks.find { it.id == lockid } // find the lock
        def lockSensor = settings."sensor${lock}" // Get the sensor for the lock

        if (!settings."relockAfter${lock}") { // Check if the settings have changed
            log.trace "No relock timeout specified for door ${lock} as settings/modes have changed"
            //log.trace "Removing ${lockid} from the list of pending relocks"
            def reLocks = atomicState.reLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
            reLocks.remove(lockid) // We are done with this lock, remove it from the list
            atomicState.reLocks = reLocks // set it back to atomicState
            return // move on
        }
        
        Long timeLeft = (((60 * 1000 * settings."relockAfter${lock}") + timestamp) - now())/1000 // timestamp and now() is in ms
        if (timeLeft <= 1) { // If we are within 1 second then go ahead since the timer isn't always 100% accurate
            if (settings."relockDoorModes${lock}" ? settings."relockDoorModes${lock}".find{it == location.mode} : true) { // Check if the mode is still active
                if (!lockSensor) { // If we don't have a sensor then just lock on schedule
                    log.info "No sensor found on ${lock} when closed, locking the door"
                    lock.lock() // lock it
                    //log.trace "Removing ${lockid} from the list of pending relocks"
                    def reLocks = atomicState.reLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                    reLocks.remove(lockid) // We are done with this lock, remove it from the list
                    atomicState.reLocks = reLocks // set it back to atomicState
                    //log.trace "Checking for any pending relocks in 3 seconds"
                    startTimer(3, reLockDoor) // Next pending relock in 3 seconds (give it some time for the mesh network)
                    return // We're done here
                } else if (lockSensor.latestValue("contact") == "closed") {
                    log.info "Sensor ${lockSensor} is reporting door ${lock} is closed, locking the door"
                    lock.lock() // lock it
                    //log.trace "Removing ${lockid} from the list of pending relocks"
                    def reLocks = atomicState.reLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                    reLocks.remove(lockid) // We are done with this lock, remove it from the list
                    atomicState.reLocks = reLocks // set it back to atomicState
                    //log.trace "Checking for any pending relocks in 3 seconds"
                    startTimer(3, reLockDoor) // Next pending relock in 3 seconds (give it some time for the mesh network)
                    return // We're done here
                } else {
                    log.debug "Sensor ${lockSensor} is reporting door ${lock} is not closed, will check again in 60 seconds"
                    startTimer(60, reLockDoor) // Check back again in some time
                }
            } else {
                log.trace "Relock mode conditions not met, not executing relock"
                def reLocks = atomicState.reLocks // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                reLocks.remove(lockid) // We are done with this lock, remove it from the list
                atomicState.reLocks = reLocks // set it back to atomicState
            }
        } else {
            log.trace "${lock} has not reached the time limit of ${settings."relockAfter${lock}"} minutes yet, ${timeLeft/60} minutes to go"
            if (!shortestPendingTime || (timeLeft < shortestPendingTime)) {
                log.trace "Settings shortest pending time to ${timeLeft} seconds"
                shortestPendingTime = timeLeft
            }
        }
    }
    
    if (shortestPendingTime) {
        startTimer((shortestPendingTime < 1 ? 1 : shortestPendingTime), reLockDoor) // Check back again after shortest pending timeout
    }
}

// Notify if the doors are left open
def notifyOpenDoor() {
    def notifyOpenDoorsIds = atomicState.notifyOpenDoors // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
    log.trace "Checking Locks ${notifyOpenDoorsIds} door sensor state"

    Long shortestPendingTime = 0 // in seconds
    
    notifyOpenDoorsIds?.each { lockid, timestamp ->
        def lock = locks.find { it.id == lockid } // find the lock
        def lockSensor = settings."sensor${lock}" // Get the sensor for the lock
        
        if (!settings."openNotify${lock}" || !settings."openNotifyTimeout${lock}" || (settings."openNotifyModes${lock}" && !(settings."openNotifyModes${lock}"?.find{it == location.mode}))) { // Check if the settings have changed
            log.trace "No need to monitor open sensor ${lockSensor} for door ${lock} as settings/modes have changed"
            //log.trace "Removing ${lockid} from the list of pending notifications"
            def notifyOpenDoors = atomicState.notifyOpenDoors // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
            notifyOpenDoors.remove(lock.id) // We are done with this lock, remove it from the list
            atomicState.notifyOpenDoors = notifyOpenDoors // set it back to atomicState
            return // move on
        }
        
        Long timeLeft = (((60 * 1000 * settings."openNotifyTimeout${lock}") + timestamp) - now())/1000 // timestamp and now() is in ms
        if (timeLeft <= 1) { // If we are within 1 second then go ahead since the timer isn't always 100% accurate
            if (lockSensor.latestValue("contact") == "closed") {
                log.trace "Sensor ${lockSensor} is reporting door ${lock} is closed, no notification required"
                //log.trace "Removing ${lockid} from the list of pending notifications"
                def notifyOpenDoors = atomicState.notifyOpenDoors // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                notifyOpenDoors.remove(lock.id) // We are done with this lock, remove it from the list
                atomicState.notifyOpenDoors = notifyOpenDoors // set it back to atomicState
            } else {
                log.info "Sensor ${lockSensor} is reporting door ${lock} is open, notifying user${settings."openNotifyRepeat${lock}" ? " and checking again after ${settings."openNotifyTimeout${lock}"} minutes" : ""}"
                def msg = "$lockSensor has been open for ${settings."openNotifyTimeout${lock}"} minutes"

                //log.trace "Updating ${lock.id} timestamp in the list of notifyOpenDoors"
                def notifyOpenDoors = atomicState.notifyOpenDoors // We need to deference the atomicState object each time, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                if (settings."openNotifyRepeat${lock}") {
                    notifyOpenDoors[lock.id] = now() // Atomic to ensure we get upto date info here
                } else {
                    notifyOpenDoors.remove(lock.id) // We are done with this lock, remove it from the list
                }
                atomicState.notifyOpenDoors = notifyOpenDoors // set it back to atomicState

                if (settings."openNotifyRepeat${lock}") {
                    startTimer(60, notifyOpenDoor) // Check back again after short timeout so we don't overwrite a short wait with a long wait
                }
                sendNotifications(msg) // Do it in the end to avoid a timeout
            }
        } else {
            log.trace "${lock} has not reached the time limit of ${settings."openNotifyTimeout${lock}"} minutes yet, ${timeLeft/60} minutes to go"
            if (!shortestPendingTime || (timeLeft < shortestPendingTime)) {
                log.trace "Settings shortest pending time to ${timeLeft} seconds"
                shortestPendingTime = timeLeft
            }
        }
    }
    
    if (shortestPendingTime) {
        startTimer((shortestPendingTime < 1 ? 1 : shortestPendingTime), notifyOpenDoor) // Check back again after shortest pending timeout
    }
}

def codeResponse(evt) {
    def lock = evt.device
    def user = evt.value?.isInteger() ? evt.value as Integer : null
    def type = null
    if (!user) { // For new handler codeChanged doesn't report the user slot, we need to extract it (we only subscribe to codeChanged and codeReport)
    	def value = evt.value?.split(" ")?.first()?.trim()
        user = value?.isInteger() ? value as Integer : null
        if (evt.value?.split(" ")?.size() > 1) {
            type = evt.value?.split(" ")?.last()?.trim() // Get the transaction type
        }
    }
    def code = evt.data ? parseJson(evt.data)?.code : "" // Not all locks return a code due to a bug in the base Z-Wave lock device code
    def desc = evt.descriptionText // Description can have "is set" or "was added" or "changed" when code was added successfully
    def name = settings."userNames${user}"

    log.trace "$lock code report ${evt.name} returned Name:${name ?: ""}, User:${user}, Code:${code}, Desc:${desc}, Value: ${evt.value}, Type: ${type}"
    
    if ((evt.name == "codeChanged") && (evt.value == "all deleted" || evt.value == "all")) { // Special case, when lock is reset all codes are deleted, we don't have a user id for this one
        // First update tracking lists for used one time codes - to avoid a race condition with programmed codes
        state.usedOneTimeCodes[lock.id] = [] // Reset list as all codes are deleted
        state.codeUseCount[lock.id] = [:] // Reset code usage count
        state.lockCodes[lock.id] = [:] // Reset list
        state.retryCodeCount[lock.id] = [:] // Reset list
        def msg = "All user codes were deleted from $lock"
        log.info msg
        sendNotifications(msg) // This is mandatory as a special exception
        return // We're done here
    } else if (!user) {
        log.warn "No user slot/id found in code reponse from lock, ignoring report"
        return // We're done here
    }

    switch (type) { // For new device handler we already have a type and so lets use it
        case "set":
        case "changed":
        	type = "added" // Update the type
            break
            
        case "deleted":
        case "unset":
        	type = "deleted"
            break
            
        case "failed":
        	if (desc?.contains("duplicate")) { // DTH inaccurately reports some failed programming codes as duplicate so check extended event for real reason
                type = "duplicate"
            } // If a previous code reponse notification was lost it will report failed, but don't try to add it because a genuine failure cannot be captures. This is an issue to lock communication with z-wave mesh which needs to be addressed
            break
            
        case "renamed":
        	type = "renamed"
            break
            
        case null: // This is if we are using the device handlers which use codeReport
            if (evt.name == "codeReport") {
                if ((["is set", "added", "changed"].any { desc?.contains(it) }) && !(["unset"].any { desc?.contains(it) })) { // Bug with new ST handler uses the words changed and unset in CodeChanged event
                    type = "added"
                } else if (["is not set", "deleted"].any { desc?.contains(it) }) {
                    type = "deleted"
                } else if (["duplicate"].any { desc?.contains(it) }) {
                    type = "duplicate"
                }
            }
            break
            
        default:
            log.warn "Ignoring transaction from $lock for user $user: ${desc}"
	        return // We're done here
            break
    }
    
    if (!type) {
        log.warn "Ignoring transaction from $lock for user $user: ${desc}"
        return // We're done here
    }
    
    def currentCode = settings."userCodes${user}" as String

    // Failed means lock cannot add code for multiple reasons, like wrong pin length or it's a duplicate (either from another slot or because the prior add confirmation was lost we didn't know)
    // Do don't assume it's done and add back because the DTH can't tell the differnce between duplicates and lost responses or bad lengths
    if (!(state.lockCodes[lock.id].(user as String)) && (type == "failed")) { // Only process duplicate code notitications if the user is not already programmed in our list
        def msg = "$lock failed to add user $user. Retrying again, check pin length or try to change the code"
        log.warn msg
        detailedNotifications ? sendNotifications(msg) : sendNotificationEvent(msg) // It can fail if the user was added by other means, so we only report if needed
        return // We're done here
    }
    
    if (!(state.lockCodes[lock.id].(user as String)) && (type == "duplicate")) { // Only process duplicate code notitications if the user is not already programmed in our list
        def msg = "$lock reported user $user is a duplicate code! Please clear extra codes from your lock"
        log.warn msg
        sendNotifications(msg) // This is mandatory, cannot ignore
        return // We're done here
    }
    
    if ((state.lockCodes[lock.id].(user as String)) && (type == "renamed")) { // Only rename slots that we have in our list
        def newName = desc?.split('" to "')?.last()?.replace('"', '') // Get new name and remove quotes
        if (newName && (newName != name)) { // Cannot be blank and should be different
            updateSetting("userNames${user}", newName)
            def msg = "$lock renamed user $user from $name to $newName"
            log.info msg
            detailedNotifications ? sendNotifications(msg) : sendNotificationEvent(msg)
        }
        return // We're done here
    }
    
    if ((!state.lockCodes[lock.id].(user as String) || (state.lockCodes[lock.id].(user as String) != currentCode)) && (type == "added")) { // We can get the notifications multiple times
        state.lockCodes[lock.id][user as String] = currentCode ?: "1" // If the code doesn't exist then someone added the code externally, mark it a special code so it'll be deleted
        state.retryCodeCount[lock.id][user as String] = 0 // Reset the retry
        def msg = "Confirmed $lock added $name to user $user"
        log.info msg
        detailedNotifications ? sendNotifications(msg) : sendNotificationEvent(msg)
        return // We're done here
    }

    if ((state.lockCodes[lock.id].(user as String)) && (type == "deleted")) { // We can get the notifications multiple times (don't track "was reset" as that's an intermediary notification while setting a code)
        // First update tracking lists for used one time codes - to avoid a race condition with programmed codes
        if (state.usedOneTimeCodes[lock.id].contains(user as String)) {
            state.usedOneTimeCodes[lock.id].remove(user as String)
            log.trace "Deleted code was a used one time code, removing it from list of used one time codes"
        }
        state.codeUseCount[lock.id].remove(user as String) // Don't track the usage for this code anymore
        state.lockCodes[lock.id].remove(user as String)
        state.retryCodeCount[lock.id][user as String] = 0 // Reset the retry
        def msg = "Confirmed ${name ?: ""} user $user was deleted from $lock"
        log.info msg
        detailedNotifications ? sendNotifications(msg) : sendNotificationEvent(msg)
        return // We're done here
    }
}

// Lock event handler
def lockHandler(evt) {
    def data = null
    def lock = evt.device
    
    log.trace "Lock event name $evt.name, value $evt.value, device $evt.displayName, description $evt.descriptionText, data $evt.data"

    def evtMap = [name:evt.name, value:evt.value, displayName:evt.displayName, descriptionText:evt.descriptionText, data:evt.data, lockId: evt.device.id] // NOTE: Bug with ST, runIn passes a JSONObject instead of a map - https://community.smartthings.com/t/runin-json-vs-map/104442 so convert evt to a standard map and also we can't pass evt object to runIn

    if (evt.name == "lock") { // LOCK UNLOCK EVENTS
        if (evt.value == "unlocked") { // UNLOCKED
            unschedule(processLockActions) // If there was a pending delayed actions and user operated the lock then cancel it
            processUnlockEvent(evtMap)
        } else if (evt.value == "locked") { // LOCKED MANUALLY OR VIA KEYPAD OR ELECTRONICALLY
            unschedule(processLockActions) // If there was a pending delayed actions and user operated the lock then cancel it
            processLockEvent(evtMap)
        } else if (evt.value == "unknown") { // JAMMED CODE EVENT
            log.debug "Lock $evt.displayName Jammed!"
            if ((!settings."individualDoorActions" && jamNotify) ||
                (settings."individualDoorActions" && settings."jamNotify${lock}")) {
                def msg = "$evt.displayName lock is Jammed!"
                sendNotifications(msg)
            }        	
        }
    } else if (evt.name == "invalidCode") { // INVALID LOCK CODE EVENT
        log.debug "Lock $evt.displayName, invalid user code: ${evt.value}"
        def msg = "Invalid user code detected on $evt.displayName"
        sendNotifications(msg)
    } else if (evt.name == "tamper" && evt.value == "detected") { // Tampering of the lock
        log.debug "Lock $evt.displayName tamper detected with description $evt.descriptionText"
        def msg = "Tampering detected on $evt.displayName. ${evt.descriptionText ?: ""}"
        sendNotifications(msg)
    }
}

def processUnlockEvent(evt) {
    def data = null
    def lock = locks.find { it.id == evt.lockId }

	log.trace "Processing $lock unlock event: $evt"

    // Check if we have delayed relock is enabled, if so then start the timer now just incase the user never opens the door (reLockDoor will take care of sensor if present, immediate relock should never happen without a sensor)
    if (settings."relockDoor${lock}" && settings."relockAfter${lock}" && (settings."relockDoorModes${lock}" ? settings."relockDoorModes${lock}".find{it == location.mode} : true)) { // Are we asked to reLock this door
        if (lock.hasAttribute('autolock') && (lock.latestValue("autolock") == "enabled")) {
            log.warn "Disable AutoLock on physical lock to use SmartApp AutoReLock and AutoUnlock features"
        } else {
            log.debug "Scheduling ${lock} to lock in ${settings."relockAfter${lock}"} minutes"
            def reLocks = atomicState.reLocks ?: [:] // We need to deference the atomicState object each time and it may contain a null if it's empty so we need to allocate a new object, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
            //log.trace "Adding ${lock.id} to the list of relocks"
            reLocks[lock.id] = now() // Atomic to ensure we get upto date info here, Update and Add work the same way here so we don't need to check before adding/updating
            atomicState.reLocks = reLocks // Set it back, we can't work direct on atomicState
            reLockDoor() // Call relock door it'll take of delaying the lock as required
        }
    } else {
        log.trace "Relock conditions not met, not scheduling relock"
    }

    if (evt.data) { // Was it unlocked using a code
        data = parseJson(evt.data)
    }
    
    def user = (data?.usedCode as String) ?: ((data?.codeId as String) ?: "") // get the user if present
    def i = ((data?.usedCode ?: 0) as Integer) ?: (((data?.codeId ?: 0) as Integer) ?: 0) // get the user if present
    def lockMode = data?.type ?: (data?.method ?: (evt.descriptionText?.contains("manually") ? "manually" : "electronically"))
    // Fix for proper grammar
    switch (lockMode) {
        case "manual":
        lockMode = "manually"
        break

        case "rfid":
        lockMode = "via RFID"
        break

        case "bluetooth":
        lockMode = "via bluetooth"
        break

        case "keypad":
        lockMode = "via keypad"
        break

        case "remote":
        case "command":
        lockMode = "remotely"
        break

        case "auto":
        lockMode = "via internal autolock"
        break

        default:
            break
    }

    if (!user && !(["keypad", "rfid"].any { lockMode?.toLowerCase().contains(it) })) { // No extended data, must be a manual/auto/keyed unlock, NOTE: some locks don't send keypad user codes
        log.trace "$evt.displayName was unlocked manually. Source type: $lockMode"

        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        // First disarm SHM since it goes off due to other events
        if (settings."runXPeopleUnlockActionsManual${lockStr}"?.find{it.currentPresence == "present"}) {
            log.trace "${settings."runXPeopleUnlockActionsManual${lockStr}"?.find{it.currentPresence == "present"}} is present, not running unlock actions for door $lock"
        } else if (settings."runXModeUnlockActionsManual${lockStr}"?.find{it == location.mode}) {
            log.trace "Current mode is ${location.mode}, not running unlock actions for door $lock"
        } else {
            def msg = "$evt.displayName was unlocked $lockMode"

            /*if (settings."homeDisarmManual${lockStr}") { // Sync SHM
                log.info "Disarming Smart Home Monitor"
                sendLocationEvent(name: "alarmSystemStatus", value: "off") // First do this to avoid false alerts from a slow platform
                msg += detailedNotifications ? ", disarming Smart Home Monitor" : ""
            }*/
            
            /*try {
                if (settings."adtDisarmManual${lockStr}" && settings."adtDevices") {
                    log.info "Disarming ADT"
                    settings."adtDevices"?.disarm() // First do this to avoid false alerts from a slow platform
                    msg += detailedNotifications ? ", disarming ADT" : ""
                }
            } catch (e) { // This is still not official so lets be cautious about it
                log.error "Error disarming ADT\n$e"
                msg += ", error disarming ADT"
            }*/

            if (settings."homeModeManual${lockStr}") {
                log.info "Changing mode to ${settings."homeModeManual${lockStr}"}"
                if (location.modes?.find{it.name == settings."homeModeManual${lockStr}"}) {
                    setLocationMode(settings."homeModeManual${lockStr}") // First do this to avoid false alerts from a slow platform
                }  else {
                    log.warn "Tried to change to undefined mode '${settings."homeModeManual${lockStr}"}'"
                }
                msg += detailedNotifications ? ", changing mode to ${settings."homeModeManual${lockStr}"}" : ""
            }

            /*if (settings."homePhraseManual${lockStr}" && location.helloHome?.getPhrases()) {
                log.info "$evt.displayName was unlocked successfully, running routine ${settings."homePhraseManual${lockStr}"}"
                location.helloHome.execute(settings."homePhraseManual${lockStr}") // First do this to avoid false alerts from a slow platform
                msg += detailedNotifications ? ", running routine ${settings."homePhraseManual${lockStr}"}" : ""
            }*/

            if (settings."turnOnSwitchesAfterSunsetManual${lockStr}") {
                def cdt = new Date(now())
                def sunsetSunrise = getSunriseAndSunset(sunsetOffset: "-00:30") // Turn on 30 minutes before sunset (dark)
                log.trace "Current DT: $cdt, Sunset $sunsetSunrise.sunset, Sunrise $sunsetSunrise.sunrise"
                if ((cdt >= sunsetSunrise.sunset) || (cdt <= sunsetSunrise.sunrise)) {
                    log.info "$evt.displayName was unlocked successfully, turning on lights ${settings."turnOnSwitchesAfterSunsetManual${lockStr}"} since it's after sunset but before sunrise"
                    settings."turnOnSwitchesAfterSunsetManual${lockStr}"?.on()
                    msg += detailedNotifications ? ", turning on lights ${settings."turnOnSwitchesAfterSunsetManual${lockStr}"}" : ""
                }
            }

            if (settings."turnOnSwitchesManual${lockStr}") {
                log.info "$evt.displayName was unlocked successfully, turning on switches ${settings."turnOnSwitchesManual${lockStr}"}"
                settings."turnOnSwitchesManual${lockStr}"?.on()
                msg += detailedNotifications ? ", turning on switches ${settings."turnOnSwitchesManual${lockStr}"}" : ""
            }

            if (settings."turnOffSwitchesManual${lockStr}") {
                log.info "$evt.displayName was unlocked successfully, turning off switches ${settings."turnOffSwitchesManual${lockStr}"}"
                settings."turnOffSwitchesManual${lockStr}"?.off()
                msg += detailedNotifications ? ", turning off switches ${settings."turnOffSwitchesManual${lockStr}"}" : ""
            }

            if (settings."unlockLocksManual${lockStr}") {
                log.info "$evt.displayName was unlocked successfully, unlocking ${settings."unlockLocksManual${lockStr}"}"
                settings."unlockLocksManual${lockStr}"?.unlock()
                msg += detailedNotifications ? ", unlocking ${settings."unlockLocksManual${lockStr}"}" : ""
            }

            if (settings."openGarageManual${lockStr}") {
                log.info "$evt.displayName was unlocked successfully, opening ${settings."openGarageManual${lockStr}"}"
                settings."openGarageManual${lockStr}"?.open()
                msg += detailedNotifications ? ", opening ${settings."openGarageManual${lockStr}"}" : ""
            }

            if (settings."manualNotify${lockStr}" && (settings."manualNotifyModes${lockStr}" ? settings."manualNotifyModes${lockStr}".find{it == location.mode} : true)) {
                sendNotifications(msg)
            }
        }
    } else { // KEYPAD / RFID UNLOCK
        def name = settings."userNames${i}"
        def notify = settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : false // UpdateSettings stores it as string
        def notifyCount = settings."userNotifyUseCount${i}" ? (settings."userNotifyUseCount${i}" as Integer) : 0 // UpdateSettings stores as string
        def notifyModes = settings."userNotifyModes${i}"
        def notifyXPresence = settings."userXNotifyPresence${i}"

        log.trace "Lock $evt.displayName unlocked by $name, notify $notify, notify count: $notifyCount, notify modes $notifyModes, notify NOT present $notifyXPresence, Source type: $lockMode"

        def msg = ""

        if (i == 0) {
            name = "Master Code" // Special case locks like Yale have a master code which isn't programmable and is code 0
            notify = true // always inform about master users
            user = "" // Master code uses general actions
        }

        if (!name) { // will handle usedCode null errors
            notify = true // always inform about unknown users
            msg = "$evt.displayName was unlocked by Unknown User from slot $i $lockMode"
        } else {
            msg = "$evt.displayName was unlocked by $name $lockMode"
        }

        // Check if we have user override unlock actions defined
        if (!settings."userOverrideUnlockActions${i as String}") {
            log.trace "Did not find per user unlock actions, falling back to general actions"
            user = ""
        }

        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions${user}") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        // First disarm SHM since it goes off due to other events
        if (settings."runXPeopleUnlockActions${lockStr}${user}"?.find{it.currentPresence == "present"}) {
            log.trace "${settings."runXPeopleUnlockActions${lockStr}${user}"?.find{it.currentPresence == "present"}} is present, not running unlock actions for door $lock"
        } else if (settings."runXModeUnlockActions${lockStr}${user}"?.find{it == location.mode}) {
            log.trace "Current mode is ${location.mode}, not running unlock actions for door $lock"
        } else {
            // If we have a specific mode passed by the keypad lets use that otherwise use configured options
            if ((settings."keypadArmDisarm${lockStr}${user}") && data?.armMode) {
                switch (data.armMode) { // Set Keypad lock state
                    case "disarmed":
                    	/*log.info "Disarming Smart Home Monitor" // Sync SHM
                    	sendLocationEvent(name: "alarmSystemStatus", value: "off") // First do this to avoid false alerts from a slow platform
                        msg += detailedNotifications ? ", disarming Smart Home Monitor" : ""*/
                        /*try {
                            if (settings."adtDevices") {
                                log.info "Disarming ADT"
                                settings."adtDevices"?.disarm() // First do this to avoid false alerts from a slow platform
                                msg += detailedNotifications ? ", disarming ADT" : ""
                                startTimer(1, adtChangeHandler) // If this came from a keypad and direct control for ADT is enabled, then refresh the keypad state (incase exit code beeping needs to be cancelled)
                            //} else {
                            //    startTimer(1, shmChangeHandler) // If this came from a keypad and direct control for SHM is enabled, then refresh the keypad state (incase exit code beeping needs to be cancelled)
                            }
                        } catch (e) { // This is still not official so lets be cautious about it
                            log.error "Error disarming ADT\n$e"
                            msg += ", error disarming ADT"
                        }*/
                    	break
                        
                    default:
                        log.warn "Invalid keypad mode detected: ${data.armMode}"
                        msg += ", invalid keypad mode ${data.armMode}"
                        break
                }
            } else {
                /*if (settings."homeDisarm${lockStr}${user}") { // Sync SHM
                    log.info "Disarming Smart Home Monitor"
                    sendLocationEvent(name: "alarmSystemStatus", value: "off") // First do this to avoid false alerts from a slow platform
                    msg += detailedNotifications ? ", disarming Smart Home Monitor" : ""
                }*/
                
                /*try {
                    if (settings."adtDisarm${lockStr}${user}" && settings."adtDevices") {
                        log.info "Disarming ADT"
                        settings."adtDevices"?.disarm() // First do this to avoid false alerts from a slow platform
                        msg += detailedNotifications ? ", disarming ADT" : ""
                    }
                } catch (e) { // This is still not official so lets be cautious about it
                    log.error "Error disarming ADT\n$e"
                    msg += ", error disarming ADT"
                }*/
            }

            if (settings."homeMode${lockStr}${user}") {
                log.info "Changing mode to ${settings."homeMode${lockStr}${user}"}"
                if (location.modes?.find{it.name == settings."homeMode${lockStr}${user}"}) {
                    setLocationMode(settings."homeMode${lockStr}${user}") // First do this to avoid false alerts from a slow platform
                }  else {
                    log.warn "Tried to change to undefined mode '${settings."homeMode${lockStr}${user}"}'"
                }
                msg += detailedNotifications ? ", changing mode to ${settings."homeMode${lockStr}${user}"}" : ""
            }

            /*if (settings."homePhrase${lockStr}${user}" && location.helloHome?.getPhrases()) {
                log.info "$evt.displayName was unlocked successfully, running routine ${settings."homePhrase${lockStr}${user}"}"
                location.helloHome.execute(settings."homePhrase${lockStr}${user}") // First do this to avoid false alerts from a slow platform
                msg += detailedNotifications ? ", running routine ${settings."homePhrase${lockStr}${user}"}" : ""
            }*/

            if (settings."turnOnSwitchesAfterSunset${lockStr}${user}") {
                def cdt = new Date(now())
                def sunsetSunrise = getSunriseAndSunset(sunsetOffset: "-00:30") // Turn on 30 minutes before sunset (dark)
                log.trace "Current DT: $cdt, Sunset $sunsetSunrise.sunset, Sunrise $sunsetSunrise.sunrise"
                if ((cdt >= sunsetSunrise.sunset) || (cdt <= sunsetSunrise.sunrise)) {
                    log.info "$evt.displayName was unlocked successfully, turning on lights ${settings."turnOnSwitchesAfterSunset${lockStr}${user}"} since it's after sunset but before sunrise"
                    settings."turnOnSwitchesAfterSunset${lockStr}${user}"?.on()
                    msg += detailedNotifications ? ", turning on lights ${settings."turnOnSwitchesAfterSunset${lockStr}${user}"}" : ""
                }
            }

            if (settings."turnOnSwitches${lockStr}${user}") {
                log.info "$evt.displayName was unlocked successfully, turning on switches ${settings."turnOnSwitches${lockStr}${user}"}"
                settings."turnOnSwitches${lockStr}${user}"?.on()
                msg += detailedNotifications ? ", turning on switches ${settings."turnOnSwitches${lockStr}${user}"}" : ""
            }

            if (settings."turnOffSwitches${lockStr}${user}") {
                log.info "$evt.displayName was unlocked successfully, turning off switches ${settings."turnOffSwitches${lockStr}${user}"}"
                settings."turnOffSwitches${lockStr}${user}"?.off()
                msg += detailedNotifications ? ", turning off switches ${settings."turnOffSwitches${lockStr}${user}"}" : ""
            }
            
            if (settings."toggleSwitches${lockStr}${user}") {
                log.info "$evt.displayName was unlocked successfully, toggling switches ${settings."toggleSwitches${lockStr}${user}"}"
                settings."toggleSwitches${lockStr}${user}".each { dev ->
                	dev.currentValue("switch") == "on" ? dev?.off() : dev?.on()
                }
                msg += detailedNotifications ? ", toggling switches ${settings."toggleSwitches${lockStr}${user}"}" : ""
            }

            if (settings."unlockLocks${lockStr}${user}") {
                log.info "$evt.displayName was unlocked successfully, unlocking ${settings."unlockLocks${lockStr}${user}"}"
                settings."unlockLocks${lockStr}${user}"?.unlock()
                msg += detailedNotifications ? ", unlocking ${settings."unlockLocks${lockStr}${user}"}" : ""
            }

            if (settings."openGarage${lockStr}${user}") {
                log.info "$evt.displayName was unlocked successfully, opening ${settings."openGarage${lockStr}${user}"}"
                settings."openGarage${lockStr}${user}"?.open()
                msg += detailedNotifications ? ", opening ${settings."openGarage${lockStr}${user}"}" : ""
            }
        }

        // Check for one time codes and disable them if required
        def userType = settings."userType${i}" // User type
        def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
        if (userLocks?.contains(lock.id) && (userType == 'One time')) {
            if (!state.usedOneTimeCodes[lock.id].contains(i as String)) {
                log.trace "Marking one time code as used and requesting removal from lock"
                state.usedOneTimeCodes[lock.id].add(i as String) // mark the user slot used
                codeCheck() // Check the expired code and remove from lock
            } else {
                log.warn "One time code is ALREADY marked as used"
            }
        }

        // Send notifications
        if (i) { // If we have a known user, increment the usage count
            state.codeUseCount[lock.id][i as String] = (state.codeUseCount[lock.id][i as String] ?: 0) + 1
        }
        if (notify && (
            	(notifyModes ? notifyModes?.find{it == location.mode} : true) &&
            	(notifyXPresence ? notifyXPresence.every{it.currentPresence != "present"} : true)
            ) && (
            	!i || (notifyCount ? (state.codeUseCount[lock.id][i as String] <= notifyCount) : true)
        )) {
            sendNotifications(msg, (settings."userOverrideNotifications${i}" && (settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : settings."userNotify${i}")) ? i as String : "")
        }
    }
}

def processLockEvent(evt) {
    def data = null
    def lock = locks.find { it.id == evt.lockId }

    log.trace "Processing $lock lock event: $evt"

    def msgs = [] // Message to send
    def user = "" // User slot used
    def i = 0 // Slot used
    
    if (evt.data) { // Was it locked using a user code
        data = parseJson(evt.data)
    }
    def lockMode = data?.type ?: (data?.method ?: (evt.descriptionText?.contains("manually") ? "manually" : "electronically"))
    // Fix for proper grammar and additional lock types mapping
    switch (lockMode) {
        case "manual":
        lockMode = "manually"
        break

        case "rfid":
        lockMode = "via RFID"
        break

        case "bluetooth":
        lockMode = "via bluetooth"
        break

        case "keypad":
        lockMode = "via keypad"
        break

        case "remote":
        case "command":
        lockMode = "remotely"
        break

        case "auto":
        lockMode = "via internal autolock"
        break

        default:
            break
    }

    evt.lockMode = lockMode // Save the lockMode calculated
    evt.data = data // Update the data to be passed
    user = (data?.usedCode as String) ?: ((data?.codeId as String) ?: "") // get the user if present
    i = ((data?.usedCode ?: 0) as Integer) ?: (((data?.codeId ?: 0) as Integer) ?: 0) // get the user if present
    log.trace "$lock locked by user $user $lockMode"

    if ((["keypad", "rfid"].any { lockMode?.toLowerCase().contains(it) }) || user) { // LOCKED VIA KEYPAD/RFID
        def name, notify, notifyCount, notifyModes, notifyXPresence, extLockNotify, extLockNotifyModes, userOverrideActions
        
        if (user) {
            if (i == 0) {
                name = "Master Code" // Special case locks like Yale have a master code which isn't programmable and is code 0
                notify = true // always inform about master users
                user = "" // Master code uses general actions
            } else {
                name = settings."userNames${i}" ?: "Unknown user" // Should have a name for the user otherwise it's unknown
                notify = settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : false // UpdateSettings stores it as string
                notifyCount = settings."userNotifyUseCount${i}" ? (settings."userNotifyUseCount${i}" as Integer) : 0 // UpdateSettings stores as string
                notifyModes = settings."userNotifyModes${i}"
                notifyXPresence = settings."userXNotifyPresence${i}"
                userOverrideActions = settings."userOverrideUnlockActions${i}"

                // Check if we have user override lock actions defined
                if (!userOverrideActions) {
                    log.trace "No user $name specific lock action found, falling back to general actions"
                    user = "" // We don't have a user specific action defined, fall back to general actions
                }
            }
        } else {
            log.trace "No usercode found in extended data for external user lock"
        }

        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions${user}") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        // Check if we have a delayed action and process accordingly
        if (settings."delayLockActionsTime${lockStr}${user}") {
            extLockNotify = settings."externalLockNotify${lockStr}"
            extLockNotifyModes = settings."externalLockNotifyModes${lockStr}"

            def msg = "$evt.displayName was locked ${name ? "by " + name + " " : ""}$lockMode, checking for actions in ${settings."delayLockActionsTime${lockStr}${user}"} minutes" // Default message to send
            log.debug msg
            if ((notify && (
                    (notifyModes ? notifyModes?.find{it == location.mode} : true) &&
                    (notifyXPresence ? notifyXPresence.every{it.currentPresence != "present"} : true)
                ) && (
                    !i || (notifyCount ? (state.codeUseCount[lock.id][i as String] <= notifyCount) : true)
            )) ||
                (!i && extLockNotify && (extLockNotifyModes ? extLockNotifyModes.find{it == location.mode} : true))) {
                msgs << msg
            }
            evt.sendNotifications = true // Since it's delayed we request notifications be sent
            // If this came from a keypad and direct control is enabled, then start an exit code beep for all keypads with direct control
            if (data?.armMode) {
                if (settings."keypadArmDisarm${lock}${""}") { // If this keypad has direct control enabled
                    def keypads = locks?.findAll{ it.hasAttribute("armMode") } // Get all keypads
                    // We don't check for individual user custom actions for keypads since synchronization needs to happen at the keypad level
                    keypads = (settings."individualDoorActions${""}" ? keypads.findAll { keypad -> (settings."keypadArmDisarm${keypad}${""}") } : (settings."keypadArmDisarm${""}${""}" ? keypads : null)) // Get keypads with direct control enabled
                    if (keypads) {
                        log.trace "Direct keypad controls enabled, starting exit delay beeping for $keypads"
                        keypads*.setExitDelay(settings."delayLockActionsTime${lockStr}${user}" * 60) // Start exit delay beeping for delayed actions with direct control enabled
                    }
                }
            }
            startTimer(settings."delayLockActionsTime${lockStr}${user}" * 60, processLockActions, evt)
        } else {
            msgs += processLockActions(evt) // Take the message back to send out
        }
    } else { // MANUAL LOCK
        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        // Check if we have a delayed action and process accordingly
        if (settings."delayLockActionsTimeManual${lockStr}") {
            def msg = "$evt.displayName was locked $lockMode, checking for actions in ${settings."delayLockActionsTimeManual${lockStr}"} minutes" // Default message to send
            log.debug msg
            if (settings."lockNotify${lockStr}" && (!(["keypad", "rfid"].any { lockMode?.toLowerCase().contains(it) })) && (settings."lockNotifyModes${lockStr}" ? settings."lockNotifyModes${lockStr}".find{it == location.mode} : true)) {
                msgs << msg
            }
            evt.sendNotifications = true // Since it's delayed we request notifications be sent
            startTimer(settings."delayLockActionsTimeManual${lockStr}" * 60, processLockActions, evt)
        } else {
            msgs += processLockActions(evt) // Take the message back to send out
        }
    }

    // Check if we need to retract a deadbolt lock it was locked while the door was still open
    /*if (settings."retractDeadbolt${lock}") { // SECURITY ISSUE - DISABLE
        def sensor = settings."sensor${lock}"
        if (sensor.latestValue("contact") == "open") {
            if (lock.hasAttribute('autolock') && (lock.latestValue("autolock") == "enabled")) { // Do not unlock if autolock features on the lock are enabled, avoid infinite loop
                def msg = "Disable AutoLock on $lock lock to avoid an infinite locking/unlocking loop while using the 'Unlock on door open' feature"
                log.warn msg
                msgs << msg
            } else {
                log.debug "$lock was locked while the door was still open, unlocking it in 10 seconds"
                def unlocks = atomicState.unLocks ?: [] // We need to deference the atomicState object each time and it may contain a null if it's empty so we need to allocate a new object, https://community.smartthings.com/t/atomicstate-not-working/27827/6?u=rboy
                if (!unlocks.contains(lock.id)) { // Don't re add the same lock again
                    //log.trace "Adding ${lock.id} to the list of unlocks"
                    unlocks.add(lock.id) // Atomic to ensure we get upto date info here
                    atomicState.unLocks = unlocks // Set it back, we can't work direct on atomicState
                }
                startTimer(10, unLockDoor) // Schedule the unlock in 10 seconds since the door may have just locked and avoid Z-Wave conflict and some locks like Schlage deadbolt have timing limitations which cause a busy conflict if done too soon
            }
        } else {
            log.trace "$lock was locked while the door was closed, we're good"
        }
    }*/

    // Last thing to do because it can timeout
    for (msg in msgs) {
        sendNotifications(msg, (settings."userOverrideNotifications${i}" && (settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : settings."userNotify${i}")) ? i as String : "")
    }
}

def processLockActions(evt) {
    def data = evt.data
    def lock = locks.find { it.id == evt.lockId }
    def msgs = [] // Message to send
    def lockMode = evt.lockMode
    def arm = "" // Security keypad arm mode (optional)
    def user = (data?.usedCode as String) ?: ((data?.codeId as String) ?: "") // get the user if present
    def i = ((data?.usedCode ?: 0) as Integer) ?: (((data?.codeId ?: 0) as Integer) ?: 0) // get the user if present

    log.trace "Processing $lock lock actions: $evt"

    if ((["keypad", "rfid"].any { lockMode?.toLowerCase().contains(it) }) || user) { // LOCKED VIA KEYPAD/RFID
        def name, notify, notifyCount, notifyModes, notifyXPresence, extLockNotify, extLockNotifyModes, userOverrideActions

        if (user) {
            if (i == 0) {
                name = "Master Code" // Special case locks like Yale have a master code which isn't programmable and is code 0
                notify = true // always inform about master users
                user = "" // Master code uses general actions
            } else {
                name = settings."userNames${i}" ?: "Unknown user" // Should have a name for the user otherwise it's unknown
                notify = settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : false // UpdateSettings stores it as string
                notifyCount = settings."userNotifyUseCount${i}" ? (settings."userNotifyUseCount${i}" as Integer) : 0 // UpdateSettings stores as string
                notifyModes = settings."userNotifyModes${i}"
                notifyXPresence = settings."userXNotifyPresence${i}"
                userOverrideActions = settings."userOverrideUnlockActions${i}"

                // Check if we have user override lock actions defined
                if (!userOverrideActions) {
                    log.trace "No user $name specific lock action found, falling back to general actions"
                    user = "" // We don't have a user specific action defined, fall back to general actions
                }
            }
        } else {
            log.trace "No usercode found in extended data for external user lock"
        }

        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions${user}") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        extLockNotify = settings."externalLockNotify${lockStr}"
        extLockNotifyModes = settings."externalLockNotifyModes${lockStr}"

        log.trace "Lock $evt.displayName locked by $name, user notify $notify, notify count: $notifyCount, user notify modes $notifyModes, notify NOT present $notifyXPresence, external notify $extLockNotify, external notify modes $extLockNotifyModes, user override action $userOverrideActions, Source type: $lockMode"

        def msg = evt.sendNotifications ? "Completing check for lock actions for $evt.displayName" : "$evt.displayName was locked ${name ? "by " + name + " " : ""}$lockMode" // Default message to send

        if (settings."runXPeopleLockActions${lockStr}${user}"?.find{it.currentPresence == "present"}) {
            log.trace "${settings."runXPeopleLockActions${lockStr}${user}"?.find{it.currentPresence == "present"}} is present, not running lock actions for door $lock"
        } else if (settings."runXModeLockActions${lockStr}${user}"?.find{it == location.mode}) {
            log.trace "Current mode is ${location.mode}, not running lock actions for door $lock"
        } else {
            // If we have a specific mode passed by the keypad lets use that otherwise use configured options
            if (data?.armMode) {
                switch (data.armMode) { // Check for custom keypad arm actions
                    case "armedStay":
                    	if (settings."keypadArmActions${lockStr}${user}${"stay"}") {
                            log.debug "Running custom actions for keypad stay/partial button"
                            arm = "stay"
                        }
                        break
                        
                    case "armedNight":
                    	if (settings."keypadArmActions${lockStr}${user}${"night"}") {
                            log.debug "Running custom actions for keypad night button"
                            arm = "night"
                        }
                        break
                        
                    case "armedAway":
                    	if (settings."keypadArmActions${lockStr}${user}${"away"}") {
                            log.debug "Running custom actions for keypad away/on button"
                            arm = "away"
                        }
                        break
                        
                    default:
                        log.warn "Invalid keypad Arm mode detected: ${data.armMode}"
                    	msg += ", invalid keypad Arm mode ${data.armMode}"
                        break                        
                }
            }

            if ((settings."keypadArmDisarm${lockStr}${user}") && data?.armMode) {
                switch (data.armMode) { // Set Keypad lock state
                    case "armedStay":
                    case "armedNight":
                    	/*log.info "Arming Smart Home Monitor to Stay"
                        sendLocationEvent(name: "alarmSystemStatus", value: "stay") // Sync SHM
                        msg += detailedNotifications ? ", Arming Smart Home Monitor to Stay" : ""*/
                        /*try {
                            if (settings."adtDevices") {
                                log.info "Arming ADT to Stay"
                                settings."adtDevices"?.armStay('armedStay')
                                msg += detailedNotifications ? ", Arming ADT to Stay" : ""
                            }
                        } catch (e) { // This is still not official so lets be cautious about it
                            log.error "Error arming ADT to Stay\n$e"
                            msg += ", error arming ADT to Stay"
                        }*/
                    	break
                    
                    case "armedAway":
                    	/*log.info "Arming Smart Home Monitor to Away"
                        sendLocationEvent(name: "alarmSystemStatus", value: "away") // Sync SHM
                        msg += detailedNotifications ? ", Arming Smart Home Monitor to Away" : ""*/
                        /*try {
                            if (settings."adtDevices") {
                                log.info "Arming ADT to Away"
                                settings."adtDevices"?.armAway('armedAway')
                                msg += detailedNotifications ? ", Arming ADT to Away" : ""
                            }
                        } catch (e) { // This is still not official so lets be cautious about it
                            log.error "Error arming ADT to Away\n$e"
                            msg += ", error arming ADT to Away"
                        }*/
                    	break
                        
                    default:
                        log.warn "Invalid keypad mode detected: ${data.armMode}"
                    	msg += ", invalid keypad mode ${data.armMode}"
                        break
                }
            } else {
                /*if (settings."homeArm${lockStr}${user}") { // Sync SHM
                    if (settings."homeArmStay${lockStr}${user}") {
                        log.info "Arming Smart Home Monitor to Stay"
                        sendLocationEvent(name: "alarmSystemStatus", value: "stay")
                        msg += detailedNotifications ? ", Arming Smart Home Monitor to Stay" : ""
                    } else {
                        log.info "Arming Smart Home Monitor to Away"
                        sendLocationEvent(name: "alarmSystemStatus", value: "away")
                        msg += detailedNotifications ? ", Arming Smart Home Monitor to Away" : ""
                    }
                }*/
                
                /*try {
                    if (settings."adtArm${lockStr}${user}" && settings."adtDevices") {
                        if (settings."homeArmStay${lockStr}${user}") {
                            log.info "Arming ADT to Stay"
                            settings."adtDevices"?.armStay('armedStay')
                            msg += detailedNotifications ? ", Arming ADT to Stay" : ""
                        } else {
                            log.info "Arming ADT to Away"
                            settings."adtDevices"?.armAway('armedAway')
                            msg += detailedNotifications ? ", Arming ADT to Away" : ""
                        }
                    }
                } catch (e) { // This is still not official so lets be cautious about it
                    log.error "Error arming ADT\n$e"
                    msg += ", error arming ADT"
                }*/
            }

            if (settings."externalLockMode${lockStr}${user}${arm}") {
                log.info "Changing mode to ${settings."externalLockMode${lockStr}${user}${arm}"}"
                if (location.modes?.find{it.name == settings."externalLockMode${lockStr}${user}${arm}"}) {
                    setLocationMode(settings."externalLockMode${lockStr}${user}${arm}") // First do this to avoid false alerts from a slow platform
                }  else {
                    log.warn "Tried to change to undefined mode '${settings."externalLockMode${lockStr}${user}${arm}"}'"
                }
                msg += detailedNotifications ? ", changing mode to ${settings."externalLockMode${lockStr}${user}${arm}"}" : ""
            }

            /*if (settings."externalLockPhrase${lockStr}${user}${arm}" && location.helloHome?.getPhrases()) {
                log.info "$evt.displayName was locked successfully, running routine ${settings."externalLockPhrase${lockStr}${user}${arm}"}"
                location.helloHome.execute(settings."externalLockPhrase${lockStr}${user}${arm}")
                msg += detailedNotifications ? ", running ${settings."externalLockPhrase${lockStr}${user}${arm}"}" : ""
            }*/

            if (settings."externalLockTurnOnSwitches${lockStr}${user}${arm}") {
                log.info "$evt.displayName was locked successfully, turning on switches ${settings."externalLockTurnOnSwitches${lockStr}${user}${arm}"}"
                settings."externalLockTurnOnSwitches${lockStr}${user}${arm}"?.on()
                msg += detailedNotifications ? ", turning on switches ${settings."externalLockTurnOnSwitches${lockStr}${user}${arm}"}" : ""
            }

            if (settings."externalLockTurnOffSwitches${lockStr}${user}${arm}") {
                log.info "$evt.displayName was locked successfully, turning off switches ${settings."externalLockTurnOffSwitches${lockStr}${user}${arm}"}"
                settings."externalLockTurnOffSwitches${lockStr}${user}${arm}"?.off()
                msg += detailedNotifications ? ", turning off switches ${settings."externalLockTurnOffSwitches${lockStr}${user}${arm}"}" : ""
            }
            
            if (settings."externalLockToggleSwitches${lockStr}${user}${arm}") {
                log.info "$evt.displayName was locked successfully, toggling switches ${settings."externalLockToggleSwitches${lockStr}${user}${arm}"}"
                settings."externalLockToggleSwitches${lockStr}${user}${arm}".each { dev ->
                	dev.currentValue("switch") == "on" ? dev?.off() : dev?.on()
                }
                msg += detailedNotifications ? ", toggling switches ${settings."externalLockToggleSwitches${lockStr}${user}${arm}"}" : ""
            }

            if (settings."lockLocks${lockStr}${user}${arm}") {
                log.info "$evt.displayName was locked successfully, locking ${settings."lockLocks${lockStr}${user}${arm}"}"
                settings."lockLocks${lockStr}${user}${arm}"?.lock()
                msg += detailedNotifications ? ", locking ${settings."lockLocks${lockStr}${user}${arm}"}" : ""
            }

            if (settings."closeGarage${lockStr}${user}${arm}") {
                log.info "$evt.displayName was locked successfully, closing garage ${settings."closeGarage${lockStr}${user}${arm}"}"
                settings."closeGarage${lockStr}${user}${arm}"?.close()
                msg += detailedNotifications ? ", closing garage ${settings."closeGarage${lockStr}${user}${arm}"}" : ""
            }
        }

        // Send a notification if required (message would be updated)
        if (i) { // If we have a known user, increment the usage count
            state.codeUseCount[lock.id][i as String] = (state.codeUseCount[lock.id][i as String] ?: 0) + 1
        }
        if ((notify && (
            	(notifyModes ? notifyModes?.find{it == location.mode} : true) &&
            	(notifyXPresence ? notifyXPresence.every{it.currentPresence != "present"} : true)
            ) && (
            	!i || (notifyCount ? (state.codeUseCount[lock.id][i as String] <= notifyCount) : true)
        )) ||
            (!i && extLockNotify && (extLockNotifyModes ? extLockNotifyModes.find{it == location.mode} : true))) {
            msgs << msg
        }
    } else { // MANUAL LOCK
        log.trace "Lock $evt.displayName locked manually, Source type: $lockMode"

        // Check if we have individual actions for each lock
        def lockStr = ""
        if (settings."individualDoorActions") {
            lockStr = lock as String
        } else {
            lockStr = ""
        }

        def msg = evt.sendNotifications ? "Completing check for lock actions for $evt.displayName" : "$evt.displayName was locked $lockMode" // Default message to send

        if (settings."runXPeopleLockActionsManual${lockStr}"?.find{it.currentPresence == "present"}) {
            log.trace "${settings."runXPeopleLockActionsManual${lockStr}"?.find{it.currentPresence == "present"}} is present, not running lock actions for door $lock"
        } else if (settings."runXModeLockActionsManual${lockStr}"?.find{it == location.mode}) {
            log.trace "Current mode is ${location.mode}, not running lock actions for door $lock"
        } else {
            /*if (settings."homeArmManual${lockStr}") { // Sync SHM
                log.info "Arming Smart Home Monitor to Stay"
                sendLocationEvent(name: "alarmSystemStatus", value: "stay")
                msg += detailedNotifications ? ", Arming Smart Home Monitor to Stay" : ""
            }*/

            /*try {
                if (settings."adtArmManual${lockStr}" && settings."adtDevices") {
                    if (settings."homeArmAwayManual${lockStr}") {
                        log.info "Arming ADT to Away"
                        settings."adtDevices"?.armAway('armedAway')
                        msg += detailedNotifications ? ", Arming ADT to Away" : ""
                    } else {
                        log.info "Arming ADT to Stay"
                        settings."adtDevices"?.armStay('armedStay')
                        msg += detailedNotifications ? ", Arming ADT to Stay" : ""
                    }
                }
            } catch (e) { // This is still not official so lets be cautious about it
                log.error "Error arming ADT to Stay\n$e"
                msg += ", error arming ADT to Stay"
            }*/

            if (settings."externalLockModeManual${lockStr}") {
                log.info "Changing mode to ${settings."externalLockModeManual${lockStr}"}"
                if (location.modes?.find{it.name == settings."externalLockModeManual${lockStr}"}) {
                    setLocationMode(settings."externalLockModeManual${lockStr}") // First do this to avoid false alerts from a slow platform
                }  else {
                    log.warn "Tried to change to undefined mode '${settings."externalLockModeManual${lockStr}"}'"
                }
                msg += detailedNotifications ? ", changing mode to ${settings."externalLockModeManual${lockStr}"}" : ""
            }

            /*if (settings."externalLockPhraseManual${lockStr}" && location.helloHome?.getPhrases()) {
                log.info "$evt.displayName was locked successfully, running routine ${settings."externalLockPhraseManual${lockStr}"}"
                location.helloHome.execute(settings."externalLockPhraseManual${lockStr}")
                msg += detailedNotifications ? ", running ${settings."externalLockPhraseManual${lockStr}"}" : ""
            }*/

            if (settings."externalLockTurnOnSwitchesManual${lockStr}") {
                log.info "$evt.displayName was locked successfully, turning on switches ${settings."externalLockTurnOnSwitchesManual${lockStr}"}"
                settings."externalLockTurnOnSwitchesManual${lockStr}"?.on()
                msg += detailedNotifications ? ", turning on switches ${settings."externalLockTurnOnSwitchesManual${lockStr}"}" : ""
            }

            if (settings."externalLockTurnOffSwitchesManual${lockStr}") {
                log.info "$evt.displayName was locked successfully, turning off switches ${settings."externalLockTurnOffSwitchesManual${lockStr}"}"
                settings."externalLockTurnOffSwitchesManual${lockStr}"?.off()
                msg += detailedNotifications ? ", turning off switches ${settings."externalLockTurnOffSwitchesManual${lockStr}"}" : ""
            }

            if (settings."lockLocksManual${lockStr}") {
                log.info "$evt.displayName was locked successfully, locking ${settings."lockLocksManual${lockStr}"}"
                settings."lockLocksManual${lockStr}"?.lock()
                msg += detailedNotifications ? ", locking ${settings."lockLocksManual${lockStr}"}" : ""
            }

            if (settings."closeGarageManual${lockStr}") {
                log.info "$evt.displayName was locked successfully, closing garage ${settings."closeGarageManual${lockStr}"}"
                settings."closeGarageManual${lockStr}"?.close()
                msg += detailedNotifications ? ", closing garage ${settings."closeGarageManual${lockStr}"}" : ""
            }
        }

        // Send notitications for manual and electronic locking only, keypad is handled above with lock actions
        if (settings."lockNotify${lockStr}" && (!(["keypad", "rfid"].any { lockMode?.toLowerCase().contains(it) })) && (settings."lockNotifyModes${lockStr}" ? settings."lockNotifyModes${lockStr}".find{it == location.mode} : true)) {
            msgs << msg
        }
    }
    
    // Check if we are asked to send the notifications or return them back
    if (evt.sendNotifications) {
        // Last thing to do because it can timeout
        for (msg1 in msgs) {
            sendNotifications(msg1, (settings."userOverrideNotifications${i}" && (settings."userNotify${i}" ? settings."userNotify${i}".toBoolean() : settings."userNotify${i}")) ? i as String : "")
        }
    } else {
        return msgs
    }
}

def clearAllCodes() {
    log.trace "Clearing codes from locks"
    
    def msgs = []

    if ((maxUserNames != null) && ((maxUserNames as Integer) > 0)) { // Clear all users
        log.debug "Clearing user slots 1 to ${maxUserNames}"
        startTimer(1, removeUsersOffline, [ data : [start: 1, end: (maxUserNames as Integer)] ]) // Clear the slots

        for (lock in locks) {
            def msg = "Marking first ${maxUserNames} users to be cleared from ${lock}"
            def user = 1
            while (user <= maxUserNames) {
                // ST can't clear too many codes at once, so lets mark the previous code as populated so the app will clear it eventually
                state.lockCodes[lock.id][user as String] = "1" // Indicate (special) previous code so the app will clear it later
                user++
            }
            
            //log.trace msg
            //msgs << msg
        }

        def totalClearingTime = ((((locks?.size() ?: 0) * (maxUserNames as Integer) * (sendDelay ?: 5)) / 60) as Integer) + 1
        if (totalClearingTime) {
            def msg = "${app.label} may take about ${totalClearingTime} minutes to clear the users from the locks"
            log.debug msg
            msgs << msg
        }
    } // Clear excess users offline so it doesn't slow down the UI (do it while reducing users so that when you increase the slots are already cleared)
    
    deleteSetting("clearUserCodes") // We're done with clearing - reset it

    startTimer(1, kickStart) // It takes the lock about 15 seconds to clear the codes and finish up pending commands

    // Last thing to do since it could timeout
    for (msg in msgs) {
        //log.trace msg
        sendNotifications(msg)
    }
}

def codeCheck() {
    // Check if the user has upgraded the SmartApp and reinitailize if required
    if (state.clientVersion && (state.clientVersion != clientVersion())) { // Check for platform outage (null)
        def msg = "NOTE: ${app.label} detected a code upgrade. Updating configuration, please open the app and re-validate your settings"
        log.warn msg
        startTimer(1, appTouch) // Reinitialize the app offline to avoid a loop as appTouch calls codeCheck
        //sendPush msg // Do this in the end as it may timeout
        return
    }
    
    log.warn "READ THIS BEFORE PROCCEDING: IT IS NORMAL TO SEE DEBUG MESSAGES EVERY MINUTE, IT CONFIRMS THAT THE APP IS HEALTHY AND RUNNING IN THE CLOUD. IT DOES NOT COMMUNICATE WITH THE LOCK UNLESS YOU SEE A MESSAGE BOX SAYING 'REQUESTED LOCK TO XXXXX'."

    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }

    log.trace "The date/time on the hub now is ${(new Date(now())).format("EEE MMM dd yyyy HH:mm z", timeZone)}"

    // Hack for broken ST timers - Schedule the Heartbeat
    if (((state.lastHeartBeat ?: 0) + ((10+5)*60*1000) < now()) && canSchedule()) { // Since we are scheduling the heartbeat every 10 minutes, give it a 5 minute grace
        log.warn "Heartbeat not called in last 15 minutes, rescheduling heartbeat"
        schedule("* */10 * * * ?", heartBeatMonitor) // run the heartbeat every 10 minutes
        state.lastHeartBeat = now() // give it 10 minutes before you schedule it again
    }

    // Update the last time we can code check
    state.lastCheck = now()

    for (lock in locks) {
    	if ((state.lockCodes == null) || (state.lockCodes[lock.id] == null) || (state.retryCodeCount[lock.id] == null)) { // If we have a situation where the user added a new lock without tapping save reinitialize the app
            def msg = "${app.label} detected an unsaved configuration change. Reinitializing the app, please open the app and re-validate your settings"
            log.warn msg
            startTimer(1, appTouch) // Reinitialize the app offline to avoid a loop as appTouch calls codeCheck
            return // We're done here
        }
        
        if (state.expiredLockList.contains(lock.id)) { // this lock codes hasn't been completely initiated
            //log.trace "If you're seeing this every few minutes, then ST is alive and kicking - ST cloud codes status for $lock"
            while (state.expiredNextCode <= maxUserNames) { // cycle through all the codes
                //log.trace "ST Cloud status for code $state.expiredNextCode on $lock"
                def i = state.expiredNextCode
                def name = settings."userNames${i}"?.trim() // Get the name for the slot and clear and leading or trailing spaces
                def code = settings."userCodes${i}" as String // Get the code for the slot
                def userType = settings."userType${i}" // User type
                def expDate = settings."userExpireDate${i}" // Get the expiration date
                def expTime = settings."userExpireTime${i}" // Get the expiration time
                def startDate = settings."userStartDate${i}" // Get the start date
                def startTime = settings."userStartTime${i}" // Get the start time
                def userPresent = settings."userPresent${i}" // Get user presence
                def userNotPresent = settings."userNotPresent${i}" // Get user not presence
                def userModes = settings."userModes${i}" // Get user modes
                def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
                def user = i as Integer // which user slot are we using, convert to integer to be sure
                def msg = ""
                def extraNotifications = detailedNotifications

                //log.trace "CodeCheck $i, Name: $name, Code: $code, UserType: $userType, ExpireDate: $expDate, ExpireTime: $expTime, StartDate: $startDate, StartTime: $startTime, Present: $userPresent, Not Present: $userNotPresent, UserModes: $userModes, Locks: $userLocks"

                // Check if we have more than one lock and use has not selected this lock for programming then delete it
                if (!userLocks?.contains(lock.id)) {
                    if (state.lockCodes[lock.id].(user as String)) {
                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                            msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                            log.warn msg
                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                extraNotifications = true // We need to inform the user
                            } else {
                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                msg = "" // Don't message endlessly
                            }
                        } else {
                            deleteCode(lock, user)
                            msg = "Requesting $lock to delete unconfigured user $user ${name ?: ""}"
                            log.debug msg
                        }

                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work
                        
                        // Last thing to do since it could timeout
                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                        return // We are done here, exit out as we've scheduled the next update
                    } else {
                        log.debug "$lock ${name ?: ""} user $user already unconfigured"
                    }
                } else {
                    // Check code type
                    switch (userType) {
                        case 'Expire on':
                            if (code != null) {
                                def doAdd = false
                                if (expDate && expTime) {
                                    try {
                                        // Parse the entire date/time including timezone since the Date object is converted and stored in UTC internally
                                        def exp = Date.parse("yyyy-MM-ddHH:mmZ", expDate + timeToday(expTime, timeZone).format("HH:mmZ", timeZone))
                                        def expStr = exp.format("EEE MMM dd yyyy HH:mm z", timeZone)
                                        if (exp.getTime() > now()) {
                                            if (startDate && startTime) {
                                                try {
                                                    def start = Date.parse("yyyy-MM-ddHH:mmZ", startDate + timeToday(startTime, timeZone).format("HH:mmZ", timeZone))
                                                    def startStr = start.format("EEE MMM dd yyyy HH:mm z", timeZone)
                                                    if (start.getTime() <= now()) {
                                                        msg = "Requesting $lock to add $name to user $user, code: $code, because it is scheduled to start at $startStr and expire on $expStr"
                                                        doAdd = true // we need to add the code
                                                        //log.trace "$lock User $user $name is scheduled to start at $startStr and expire on $expStr"
                                                    } else {
                                                        msg = "Requesting $lock to delete future user $user $name, start on $startStr"
                                                        //log.trace "$lock user $user $name's code is set to start in future on $startStr"
                                                    }
                                                } catch (Exception e) {
                                                    log.error "User $user $name set to Start but does not have a valid Start Date: $startDate"
                                                }
                                            } else if (startDate && !startTime) {
                                                log.error "User $user $name set to Start but does not have a valid Start Date/Time: $startDate or Time: $startTime"
                                            } else {
                                                msg = "Requesting $lock to add $name to user $user, code: $code, it is set to expire on $expStr"
                                                doAdd = true // we need to add the code
                                                //log.trace "$lock User $user $name is set to expire on $expStr"
                                            }
                                        } else {
                                            msg = "Requesting $lock to delete expired user $user $name, expired on $expStr"
                                        }
                                    } catch (Exception e) {
                                        log.error "User $user $name set to Expire but does not have a valid Expiry Date: $expDate or Time: $expTime"
                                    }
                                } else {
                                    log.error "$lock User $user $name set to Expire but does not have a Expiration Date: $expDate or Time: $expTime"
                                }

                                if (doAdd) {
                                    if (state.lockCodes[lock.id].(user as String) != code) { // Only if code has changed
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            setCode(lock, user, code, name)
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    } else {
                                        if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                            updateCodeName(lock, user, name)
                                        }
                                        log.debug "$lock User $user $name is already active"
                                    }
                                } else {
                                    if (state.lockCodes[lock.id].(user as String)) {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            deleteCode(lock, user)
                                            msg = msg ?: "Requesting $lock to delete user invalid $user ${name ?: ""}"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    } else {
                                        log.debug "$lock User $user $name is already deleted"
                                    }
                                }
                            } else if (state.lockCodes[lock.id].(user as String)) { // Code is null but the list shows programmed, i.e. we were asked to explicit send a delete command to the lock
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user already deleted"
                            }
                            break

                        case 'One time':
                            if (code != null) {
                                if (state.usedOneTimeCodes[lock.id].contains(user as String)) {
                                    if (!state.trackUsedOneTimeCodes.contains(user as String)) {
                                        state.trackUsedOneTimeCodes.add(user as String) // track it for reporting purposes
                                    }

                                    if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                        msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                        log.warn msg
                                        if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                            extraNotifications = true // We need to inform the user
                                        } else {
                                            state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                            msg = "" // Don't message endlessly
                                        }
                                    } else {
                                        deleteCode(lock, user)
                                        msg = "Requesting $lock to delete one time user $user ${name ?: ""}"
                                        log.debug msg
                                    }

                                    state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                    //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                    startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                    // Last thing to do since it could timeout
                                    (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                    return // We are done here, exit out as we've scheduled the next update
                                } else if (!state.trackUsedOneTimeCodes.contains(user as String)) { // If it's not been used add it to the lock
                                    if (state.lockCodes[lock.id].(user as String) != code) { // Only if code has changed
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            setCode(lock, user, code, name)
                                            msg = "Requesting $lock to add one time user $user ${name ?: ""}, code: $code"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    } else {
                                        if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                            updateCodeName(lock, user, name)
                                        }
                                        log.debug "$lock User $user $name is a one time code but it has not been used yet"
                                    }
                                } else {
                                    log.debug "$lock one time user $user $name is already used"
                                }
                            } else if (state.lockCodes[lock.id].(user as String)) { // Code is null but the list shows programmed, i.e. we were asked to explicit send a delete command to the lock
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user already deleted"
                            }
                            break

                        case 'Scheduled':
                            if (code != null) {
                                def doAdd = false

                                schedulesSuffix.each { schedule ->
                                    if (checkSchedule(i, schedule)) { // Check if we are within operating schedule
                                        doAdd = true
                                        msg = "Schedule $schedule active $lock to add $name to user $user, code: $code, because it is scheduled to work between ${settings."userDayOfWeek${schedule}${i}"}: ${settings."userStartTime${schedule}${i}" ? timeToday(settings."userStartTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : ""} to ${settings."userEndTime${schedule}${i}" ? timeToday(settings."userEndTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : ""}"
                                        log.trace msg
                                    } else {
                                        msg = "Schedule $schedule NOT active for $lock $name user $user, scheduled to work between ${settings."userDayOfWeek${schedule}${i}"}: ${settings."userStartTime${schedule}${i}" ? timeToday(settings."userStartTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : ""} to ${settings."userEndTime${schedule}${i}" ? timeToday(settings."userEndTime${schedule}${i}", timeZone).format("HH:mm z", timeZone) : ""}"
                                        log.trace msg
                                    }
                                }

                                if (doAdd) {
                                    if (state.lockCodes[lock.id].(user as String) == code) { // If code hasn't changed, don't add it
                                        if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                            updateCodeName(lock, user, name)
                                        }
                                        log.debug "$lock scheduled user $user $name is already active, not adding again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            setCode(lock, user, code, name)
                                            msg = "Requesting $lock to add active scheduled user $user ${name ?: ""}, code: $code"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                } else { // Outside operating schedule
                                    if (!state.lockCodes[lock.id].(user as String)) {
                                        log.debug "$lock scheduled user $user $name is already inactive, not removing again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            deleteCode(lock, user)
                                            msg = "Requesting $lock to delete inactive scheduled user $user ${name ?: ""}"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                }
                            } else if (state.lockCodes[lock.id].(user as String)) { // Code is null but the list shows programmed, i.e. we were asked to explicit send a delete command to the lock
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user already deleted"
                            }
                            break

                        case 'Permanent':
                            if (code != null) {
                                if (state.lockCodes[lock.id].(user as String) != code) { // Only if code has changed
                                    if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                        msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                        log.warn msg
                                        if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                            extraNotifications = true // We need to inform the user
                                        } else {
                                            state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                            msg = "" // Don't message endlessly
                                        }
                                    } else {
                                        setCode(lock, user, code, name)
                                        msg = "Requesting $lock to add permanent user $user ${name ?: ""}, code: $code"
                                        log.debug msg
                                    }

                                    state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                    //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                    startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                    // Last thing to do since it could timeout
                                    (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                    return // We are done here, exit out as we've scheduled the next update
                                } else {
                                    if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                        updateCodeName(lock, user, name)
                                    }
                                    log.debug "$lock User $user $name is a permanent code and is already active"
                                }
                            } else if (state.lockCodes[lock.id].(user as String)) { // Code is null but the list shows programmed, i.e. we were asked to explicit send a delete command to the lock
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user already deleted"
                            }
                            break

                        case 'Presence':
                            if (code != null) {
                                def doAdd = false

                                // Any of the 'present' users AND none of the 'not present' users are there then the code is active
                                if ((userPresent || userNotPresent) && // Atleast one condition is specified
                                    (userPresent ? userPresent.any{it.currentPresence == "present"} : true) &&
                                    (userNotPresent ? userNotPresent.every{it.currentPresence != "present"} : true)
                                   ) {
                                    doAdd = true // the code
                                    msg = "$lock user $user $name is being added because ${userPresent ? "${userPresent.findAll{it.currentPresence == "present"}} are present" : (userNotPresent ? "${userNotPresent} are not present" : "")}"
                                    log.debug msg
                                } else {
                                    msg = "$lock user $user $name is being deleted because${(userPresent || userNotPresent) ? (userPresent.every{it.currentPresence != "present"} ? " ${userPresent} are not present" : (userNotPresent ? " ${userNotPresent.findAll{it.currentPresence == "present"}} are present" : "")) : " no user presence is defined"}"
                                    log.debug msg
                                }

                                if (doAdd) {
                                    if (state.lockCodes[lock.id].(user as String) == code) { // If code hasn't changed, don't add it
                                        if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                            updateCodeName(lock, user, name)
                                        }
                                        log.debug "$lock presence user $user $name is already active, not adding again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            setCode(lock, user, code, name)
                                            msg = "Requesting $lock to add presence based user $user ${name ?: ""}, code: $code"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                } else { // Presence conditions not satisfied
                                    if (!state.lockCodes[lock.id].(user as String)) {
                                        log.debug "$lock presence user $user $name is already inactive, not removing again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            deleteCode(lock, user)
                                            msg = "Requesting $lock to delete presence based user $user ${name ?: ""}"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                }
                            }
                            break

                        case 'Modes':
                            if (code != null) {
                                def doAdd = false

                                // Any of the selected modes are active then activate the codes
                                if (userModes?.find{it == location.mode}) {
                                    doAdd = true // the code
                                    msg = "$lock user $user $name is being added because mode ${location.mode} is active"
                                    log.debug msg
                                } else {
                                    msg = "$lock user $user $name is not being deleted because mode ${location.mode} is not in the selected modes"
                                    log.debug msg
                                }

                                if (doAdd) {
                                    if (state.lockCodes[lock.id].(user as String) == code) { // If code hasn't changed, don't add it
                                        if (getCodeName(lock, user) && (getCodeName(lock, user) != name)) { // If the username has changed update it, if it's empty ignore it
                                            updateCodeName(lock, user, name)
                                        }
                                        log.debug "$lock mode user $user $name is already active, not adding again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} addition not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            setCode(lock, user, code, name)
                                            msg = "Requesting $lock to add mode based user $user ${name ?: ""}, code: $code"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                } else { // Mode conditions not satisfied
                                    if (!state.lockCodes[lock.id].(user as String)) {
                                        log.debug "$lock mode user $user $name is already inactive, not removing again"
                                    } else {
                                        if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                            msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                            log.warn msg
                                            if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                                extraNotifications = true // We need to inform the user
                                            } else {
                                                state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                                msg = "" // Don't message endlessly
                                            }
                                        } else {
                                            deleteCode(lock, user)
                                            msg = "Requesting $lock to delete mode based user $user ${name ?: ""}"
                                            log.debug msg
                                        }

                                        state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                        //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                        startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                        // Last thing to do since it could timeout
                                        (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                        return // We are done here, exit out as we've scheduled the next update
                                    }
                                }
                            }
                            break

                        case 'Inactive':
                            if (state.lockCodes[lock.id].(user as String)) { // Delete the code is hasn't been deleted
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete inactive user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user already inactive"
                            }
                            break

                        default: // No user type selected, it's empty delete code
                            if (state.lockCodes[lock.id].(user as String)) { // Delete the code is hasn't been deleted
                                if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                                    msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                                    log.warn msg
                                    if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                                        extraNotifications = true // We need to inform the user
                                    } else {
                                        state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                                        msg = "" // Don't message endlessly
                                    }
                                } else {
                                    deleteCode(lock, user)
                                    msg = "Requesting $lock to delete empty user $user ${name ?: ""}"
                                    log.debug msg
                                }

                                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
                                //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                                startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                                // Last thing to do since it could timeout
                                (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                                return // We are done here, exit out as we've scheduled the next update
                            } else {
                                log.debug "$lock ${name ?: ""} user $user is empty, code already deleted"
                            }
                        	break
                    }
                }

                state.expiredNextCode = state.expiredNextCode + 1 // move onto the next code
            }
            
            // We're done with all the programmed codes for this lock, check of see if any excess codes are left behind from a change in number of user slots and clean them up
            if (state.lockCodes[lock.id]?.any { i, code ->
                def msg = ""
                def extraNotifications = detailedNotifications
                def user = i as Integer
                if (user > maxUserNames) { // This is an excess code, clean it up
                    if ((state.retryCodeCount[lock.id][user as String] = (state.retryCodeCount[lock.id][user as String] ?: 0) + 1) > (maxRetries + 1)) {
                        msg = "Retry programming exceeded, user $user ${name ?: ""} deletion not confirmed by lock $lock"
                        log.warn msg
                        if (state.retryCodeCount[lock.id][user as String] == (maxRetries + 2)) { // Only process it once until reset
                            extraNotifications = true // We need to inform the user
                        } else {
                            state.retryCodeCount[lock.id][user as String] = (maxRetries + 3) // Fix it so when maxRetries changes, it'll pick it up
                            msg = "" // Don't message endlessly
                        }
                    } else {
                        deleteCode(lock, user)
                        msg = "Requesting $lock to delete excess user $user ${name ?: ""}"
                        log.debug msg
                    }

                    //log.trace "Scheduled next code check in ${sendDelay ?: defaultSendDelay} seconds"
                    startTimer((sendDelay ?: defaultSendDelay), codeCheck) // schedule the next code update after a few seconds otherwise it overloads locks and doesn't work

                    // Last thing to do since it could timeout
                    (extraNotifications && msg) ? sendNotifications(msg) : sendNotificationEvent(msg)
                    return true// We are done here, exit out as we've scheduled the next update
                }
            }) { // If had a match then exit as we've scheduled the next iteration
                return // We're done here
            }

            state.expiredLockList.remove(lock.id) // we are done with this lock
            state.expiredNextCode = 1 // reset back to 1 for the next lock
            //log.trace "$lock id $lock.id code check complete, unprocessed locks ${state.expiredLockList}, reset next code update to $state.expiredNextCode"
        }
    }

    // All done now reset the lock list and add the locks back for next check cycle
    state.expiredNextCode = 1 // reset back to 1 for the next lock
    for (lock in locks) {
        state.expiredLockList.add(lock.id) // reset the state for each lock to be processed
        //log.trace "Added $lock id ${lock.id} back to unprocessed locks list ${state.expiredLockList}"
    }
}

// Sets the code on the lock and also updates the username
private setCode(lock, user, code, name) {
    !(lock.hasAttribute("pinLength") || lock.hasCommand("deleteAllCodes")) ? lock.setCode(user, code, name) : lock.setCode(user, code) // Keep support for older device handlers
}

// Deletes a code from the lock
private deleteCode(lock, user) {
    lock.deleteCode(user)
}

// Update the name on the lock for a user on a lock
private updateCodeName(lock, user, name) {
    if (!(lock.hasAttribute("pinLength") || lock.hasCommand("deleteAllCodes"))) { // Older devices don't have this option
        log.info "Updating user $user name to $name on $lock"
        lock.nameSlot(user, name)
    }
}

// Gets the name of the code on the lock
private getCodeName(lock, user) {
    def name = !(lock.hasAttribute("pinLength") || lock.hasCommand("deleteAllCodes")) ? lock.currentState("lockCodes")?.jsonValue?."$user"?.trim() : null // Older handlers don't support this
    //log.trace "Got name $name from $lock for user $user"
    return name
}

// Kick start the code check routine
def kickStart() {
    schedule("* */1 * * * ?", codeCheck) // run codeCheck every 1 minute
    codeCheck()
}

// Heartbeat system to ensure that the MonitorTask doesn't die when it's supposed to be running
def heartBeatMonitor() {
    log.trace "Heartbeat monitor called"

    state.lastHeartBeat = now() // Save the last time we were executed

    log.trace "Last code check was done " + ((now() - (state.lastCheck ?: 0))/1000) + " seconds ago"
    if (((state.lastCheck ?: 0) + (3*60*1000)) < now()) { // Kick start the motion detection monitor if didn't update for more than 3 minutes
        log.warn "Code check hasn't been run a long time, calling it to kick start it"
        kickStart()
    }

    // We check for a code update everyday
    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }
    if (now() >= state.nextCodeUpdateCheck) {
        // Before checking for code update, calculate the next time we want to check
        state.nextCodeUpdateCheck = (state.nextCodeUpdateCheck ?: now()) + (1*24*60*60*1000) // 1 day from now
        log.info "Checking for next app update after ${(new Date(state.nextCodeUpdateCheck)).format("EEE MMM dd yyyy HH:mm z", timeZone)}"
        
        checkForCodeUpdate() // Check for code updates
    } else {
        log.trace "Checking for next app update after ${(new Date(state.nextCodeUpdateCheck)).format("EEE MMM dd yyyy HH:mm z", timeZone)}"
    }
}

def startTimer(seconds, function, dataMap = null) {
    log.trace "Scheduled to run $function in $seconds seconds${dataMap ? " with data $dataMap" : ""}"

    //def runTime = new Date(now() + ((Long)seconds * 1000)) // for runOnce
    //runOnce(runTime, function, [overwrite: true]) // runIn isn't reliable, runOnce is more reliable but isn't as accurate
    if (dataMap) {
        runIn(seconds, function, [overwrite: true, data: dataMap]) // runOnce is having issues with v2 hubs, hopefully runIn is more stable
    } else {
        runIn(seconds, function, [overwrite: true]) // runOnce is having issues with v2 hubs, hopefully runIn is more stable
    }
}

// Checks if we are within the current operating scheduled
// Inputs to the function are user (i) and schedule (x) (there can be multiple schedules)
// Preferences required in user input settings are:
// settings."userStartTime${x}${i}" - optional
// settings."userEndTime${x}${i}" - optional
// settings."userDayOfWeek${x}${i}" - required
private checkSchedule(def i, def x) {
    log.trace "Checking operating schedule $x for user $i"

    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }

    def doChange = false
    Calendar localCalendar = Calendar.getInstance(timeZone)
    int currentDayOfWeek = localCalendar.get(Calendar.DAY_OF_WEEK)
    def currentDT = new Date(now())

    // some debugging in order to make sure things are working correclty
    log.trace "Current time: ${currentDT.format("EEE MMM dd yyyy HH:mm z", timeZone)}"

    // Check if we are within operating times
    if (settings."userStartTime${x}${i}" && settings."userEndTime${x}${i}") {
        def scheduledStart = timeToday(settings."userStartTime${x}${i}", timeZone)
        def scheduledEnd = timeToday(settings."userEndTime${x}${i}", timeZone)

        if (scheduledEnd <= scheduledStart) { // End time is next day
            def localHour = currentDT.getHours() + (int)(timeZone.getOffset(currentDT.getTime()) / 1000 / 60 / 60)
            //log.trace "Local hour is $localHour"
            if (( localHour >= 0) && (localHour < 12)) // If we between midnight and midday
            {
                log.trace "End time is before start time and we are past midnight, assuming start time is previous day"
                scheduledStart = scheduledStart.previous() // Get the start time for yesterday
            } else {
                log.trace "End time is before start time and we are past midday, assuming end time is the next day"
                scheduledEnd = scheduledEnd.next() // Get the end time for tomorrow
            }
        }

        log.trace "Operating Start ${scheduledStart.format("HH:mm z", timeZone)}, End ${scheduledEnd.format("HH:mm z", timeZone)}"

        if (currentDT < scheduledStart || currentDT > scheduledEnd) {
            log.debug "Outside operating time schedule"
            return false
        }
    }

    // Check the condition under which we want this to run now
    // This set allows the most flexibility.
    log.trace "Operating DOW(s): ${settings."userDayOfWeek${x}${i}"}"

    if(!settings."userDayOfWeek${x}${i}") {
        log.debug "Day of week not specified for operating schedule $x for user $i"
        return false
    } else if(settings."userDayOfWeek${x}${i}".contains('All Week')) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Monday') || settings."userDayOfWeek${x}${i}".contains('Monday to Friday')) && currentDayOfWeek == Calendar.instance.MONDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Tuesday') || settings."userDayOfWeek${x}${i}".contains('Monday to Friday')) && currentDayOfWeek == Calendar.instance.TUESDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Wednesday') || settings."userDayOfWeek${x}${i}".contains('Monday to Friday')) && currentDayOfWeek == Calendar.instance.WEDNESDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Thursday') || settings."userDayOfWeek${x}${i}".contains('Monday to Friday')) && currentDayOfWeek == Calendar.instance.THURSDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Friday') || settings."userDayOfWeek${x}${i}".contains('Monday to Friday')) && currentDayOfWeek == Calendar.instance.FRIDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Saturday') || settings."userDayOfWeek${x}${i}".contains('Saturday & Sunday')) && currentDayOfWeek == Calendar.instance.SATURDAY) {
        doChange = true
    } else if((settings."userDayOfWeek${x}${i}".contains('Sunday') || settings."userDayOfWeek${x}${i}".contains('Saturday & Sunday')) && currentDayOfWeek == Calendar.instance.SUNDAY) {
        doChange = true
    }

    // If we have hit the condition to schedule this then lets do it
    if(doChange == true){
        log.debug("Within operating schedule")
        return true
    }
    else {
        log.debug("Outside operating schedule")
        return false
    }
}

private void sendText(number, message) {
    if (number) {
        def phones = number.replaceAll("[;,#]", "*").split("\\*") // Some users accidentally use ;,# instead of * and ST can't handle *,#+ in the number except for + at the beginning
        for (phone in phones) {
            try {
                sendSms(phone, message)
            } catch (Exception e) {
                sendPush "Invalid phone number $phone"
            }
        }
    }
}

private void sendNotifications(message, user = "") {
	if (!message) {
		return
    }
    
    if (location.contactBookEnabled) {
        sendNotificationToContacts(message, settings."recipients${user}")
    } else {
        if (!settings."disableAllNotify${user}") {
            sendPush message
        } else {
            sendNotificationEvent(message)
        }
        if (settings."sms${user}") {
            sendText(settings."sms${user}", message)
        }
    }

    settings."audioDevices${user}"?.each { audioDevice -> // Play audio notifications
        if (audioDevice.hasCommand("playText")) { // Check if it supports TTS
            if (audioVolume) { // Only set volume if defined as it also resumes playback
                audioDevice.playTextAndResume(message, audioVolume)
            } else {
                audioDevice.playText(message)
            }
        } else {
            if (audioVolume) { // Only set volume if defined as it also resumes playback
                audioDevice.playTrackAndResume(textToSpeech(message)?.uri, audioVolume) // No translations at this time
            } else {
                audioDevice.playTrack(textToSpeech(message)?.uri) // No translations at this time
            }
        }
    }
}

// OAUTH STUFF
// OAuth Configuration for incoming Web notifications
mappings {
    path("/api") {
        action: [
            POST: "apiCommands",
            GET: "apiCommands",
        ]
    }
}

// Validate OAuth access token used in API
private validateAccessToken(token) {
    if (token != state.accessToken) { // Make sure we're only receiving requests from the currently active access token
        return false
    } else {
        return true
    }
}

// API to create/update users
def apiCommands() {
    log.trace "API\nHeaders -> ${request?.inspect()}\nParams -> $params\nJSON -> ${request?.JSON?.inspect()}"

    // Let SmartThings handle authentication since it can be done via header which we cannot access
    /*if (!validateAccessToken(params.access_token)) {
        def msg = "Invalid access token!"
        log.error "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }*/
    
    def commands = request?.JSON
    if (!commands) {
        def msg = "No information provided, nothing to update"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    try {
        for (command in commands) {
            def action = command.key
            def slots = command.value
        	switch (action) {
                case "create": // For compatibility with version 01.00.01 and older
                	return apiCreateUsers(slots)
                	break

                case "delete": // For compatibility with version 01.00.01 and older
                	return apiDeleteUsers(slots)
                	break
                    
                case "get": // For compatibility with version 01.00.01 and older
                	return apiGetUsers(slots)
                	break
                    
                case "list locks": // Deprecated as of 01.08.01
                	return locks.collect { lock -> [(lock.displayName) : (lock.currentValue("lock"))] }
                    break
                
                case "lock status":
                	return locks.collect { lock -> [
                        (lock.displayName) : [
                            state: lock.currentValue("lock") ?: "unknown",
                            battery: (lock.currentValue("battery") ?: 0) as Integer
                        ]
                    ] }
                	break
                    
                case "list modes":
                	return location.modes*.name
                	break
                    
                case "max users":
                	return [ maxUserNames ]
                	break
                    
                case "lock actions":
                	return apiLockActions(slots)
                    break
                    
                default:
                    def msg = "Invalid action '$action', valid actions: [create, delete, get, lock status, list modes, max users, lock actions]"
                    log.error "API: $msg"
                	return render(contentType: "text/plain", data: msg, status: 400)
                    break
            }
        }
    } catch (e) {
        def msg = "Invalid command"
        log.error "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }

    // We should never get here!
    def msg = "Invalid action, contact RBoy Apps"
    log.error "API: $msg"
    return render(contentType: "text/plain", data: msg, status: 400)
}

// API to create/update users
private apiCreateUsers(slots) {
    //log.trace "API Create Users ->\n${slots}"

    def validUsersList = [] // Users on which we will finally take action
    def invalidUsersList = [:] // Users error map on which we will finally take action

    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }

    if (!slots) {
        def msg = "No user settings provided, nothing to create"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    if (!maxUserNames) {
        def msg = "No programmable users available, please configure Max programmable users through the SmartThings app"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    try {
        if (slots.size() > platformAPIUsersLimit) { // Sanity check for platform limits
            def msg = "Cannot update more than ${platformAPIUsersLimit} users at a time"
            log.error "API: $msg"
            return render(contentType: "text/plain", data: msg, status: 400)
        }
        
        // Get list of empty slots
        def emptySlots = findAllEmptySlots()
        def emptySlotsCount = emptySlots.size()

        slots.each { slot ->
            if (slot && slot.name) { // Check if we have a valid user
                def userLocks = slot.userLocks ?: ""
                def userType = slot.type
                def startDate = slot.startDate
                def expireDate = slot.expDate
                def startTime = slot.startTime
                def expTime = slot.expTime
                def code = slot.code
                def name = slot.name
                def schedules = slot.schedules
                def modes = slot.modes
                def notifyModes = slot.notifyModes
                def notifyCount = slot.notifyCount
                def notify = slot.notify
                def user = slot.user as String
                def i

                // Check if the lock pin code length match the pin code length entered by the user
                def pinDetails = getLockPinLengthDetails((locks ?: []).findAll { userLocks.contains(it?.displayName) })
                def pinLen = pinDetails.pinLen // Fixed pin code length
                def maxPinLen = pinDetails.maxPinLen // Variable minimum pin code length
                def minPinLen = pinDetails.minPinLen // Variable maximum pin code length
                def pinLenError = pinDetails.pinLenError
                
                // No nulls allowed (can't compare value to org.json.JSONObject.NULL, must use an indirect reference)
                if (slot.any { [null, "null", org.json.JSONObject.NULL].contains(it.key) || [null, "null", org.json.JSONObject.NULL].contains(it.value) }) {
                    def msg = "Invalid setting: 'null' not allowed"
                    log.error "API: User $user $msg"
                    invalidUsersList[user == null ? name : user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid name type
                if (!(name instanceof String)) {
                    def msg = "Invalid name, must be a String"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid user slot or find/assign a user slot
                if (user) { // Check for valid user
                    if ((user instanceof Integer) || ((user instanceof String) && user.isInteger())) { // If there is a user slot
                        if (((user as Integer) < 1) || ((user as Integer) > maxUserNames)) {
                            def msg = "Invalid slot, max $maxUserNames slots allowed"
                            log.error "API: User ${user} $msg"
                            invalidUsersList[user] = msg
                            return
                        }
                        i = user as Integer // Update it
                        slot.user = i // Just in case it was a String, convert it back to Integer
                        emptySlots -= i // Remove from our list of empty slots if present
                    } else { // Otherwise bad user format
                        def msg = "Invalid slot, only numbers allowed"
                        log.error "API: User ${user} $msg"
                        invalidUsersList[user] = msg
                        return
                    }
                } else { // Check for existing user slot or assign an empty slot
                    def userInfo = findUser(name) // Find the first user with this name
                    if (!userInfo) { // We need a new slot for this user name
                        if (!emptySlots) { // Check if we have empty slots available
                            def msg = "Not enough empty slots available. Maximum slots: ${maxUserNames}"
                            log.error "API: User ${name} $msg"
                            invalidUsersList[name] = msg
                            return
                        }
                        slot.user = emptySlots.removeAt(0) as Integer // Take the first slot available
                        log.trace "Assigning empty slot ${slot.user} to $name"
                    } else {
                        slot.user = userInfo.user as Integer // Update existing user
                        log.trace "User $name found in slot ${slot.user}"
                    }

                    // Update the references
                    i = slot.user as Integer
                    user = slot.user as String
                }

                // Check for valid code type
                if (!(code instanceof String)) {
                    def msg = "Invalid code, must be a String"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid notifyCount type
                if (notifyCount && !(notifyCount instanceof Integer)) {
                    def msg = "Invalid notify count, must be an Integer"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid notify type
                if ((notify != null) && !(notify instanceof Boolean)) {
                    def msg = "Invalid notify option, must be a Boolean"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid notify modes type
                if (notifyModes && !(notifyModes instanceof List)) {
                    def msg = "Invalid notifyMode, must be a List"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for valid locks type
                if (userLocks && !(userLocks instanceof List)) {
                    def msg = "Invalid userLocks, must be a List of lock names"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user                
                }
                
                // Check for invalid pin length
                if (pinLenError) {
                    def msg = "YOUR LOCKS ARE CONFIGURED TO ACCEPT DIFFERENT CODE DIGIT LENGTHS, PROGRAMMING MAY FAIL!"
                    log.error "API: User $user $msg"
                    invalidUsersList["pinLengthError"] = msg // Special case, we continue but mark a message
                }
                
                // Check if the user has entered a non digit string
                if ((code?.size() > 0) && !code?.isNumber()) {
                    def msg = "CODE IS NOT A NUMBER, PROGRAMMING WILL FAIL!"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user
                }

                // Check if the lock pin code length match the pin code length entered by the user
                for (lock in locks) {
                    if (userLocks?.contains(lock.displayName) && (pinLen || (maxPinLen && minPinLen))) { // Check if the lock support reporting pin length and it has a valid number to report (not 0 or null)
                        if ((code?.size() > 0) && (pinLen ? pinLen != code.size() : ((code.size() < minPinLen) || (code.size() > maxPinLen)))) { // If we have a code to program
                            def msg = "$lock IS CONFIGURED TO ACCEPT ${pinLen ?: "${minPinLen}-${maxPinLen}"} DIGIT CODES ONLY, PROGRAMMING WILL FAIL!"
                            log.error "API: User $user $msg"
                            invalidUsersList[user] = msg
                            return // This is critical to move on to the next user
                        }
                    }
                }

                // Sanity check for Modes
                if (notifyModes && !notifyModes.every { mode -> location.modes?.find{ it.name == mode } }) { // Check for valid modes, need atleast one
                    def msg = "Notify mode does not exist, valid modes: ${location.modes*.name}"
                    log.error "API: User $user $msg"
                    invalidUsersList[user] = msg
                    return // This is critical to move on to the next user
                }
                
                // Check for valid locks type
                if (userLocks) {
                    if (!userLocks.every { userLock -> locks*.displayName.contains(userLock) }) {
                        def msg = "Lock does not exist, valid locks: ${locks*.displayName}"
                        log.error "API: User $user $msg"
                        invalidUsersList[user] = msg
                        return // This is critical to move on to the next user                
                    } else { // Swap lock names of lock id's
                        slot.userLocks = userLocks.collect { userLock -> locks.find { lock -> lock.displayName == userLock }.id } // Every lock must have a valid id
                    }
                }
                
                // Sanity check for type formats
                switch (userType) {
                    case "Permanent":
                        validUsersList.add(slot)
                    	break

                    case "One time":
                    	locks.each { lock -> // Reset it
                            state.usedOneTimeCodes[lock.id].remove(slot.user as String)
                        }
                    	state.trackUsedOneTimeCodes.remove(slot.user as String)
                    	validUsersList.add(slot)
                    	break
                    
                    case "Expire on":
                        if (startDate) { // Optional
                            //log.trace "Found start date in setup"
                            try {
                                // If time is valid update with in the ST format (2018-07-31T04:07:06.000-0400)
                                if (!(startDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                    throw new RuntimeException("Invalid date format")
                                }
                                if (!(startTime ==~ /^(0?[0-9]|1[0-9]|2[0-3])\:(0?[0-9]|[1-5][0-9])$/)) { // Check for valid time format (HH:mm)
                                    throw new RuntimeException("Invalid time format")
                                }
                                slot.startTime = timeToday(startTime, timeZone).format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timeZone)
                                Date.parse("yyyy-MM-ddHH:mmZ", startDate + timeToday(slot.startTime, timeZone).format("HH:mmZ", timeZone)) // Test it
                            } catch (e) {
                                def msg = "Invalid start date/time"
                                log.error "API: User $user $msg\n$e"
                                invalidUsersList[user] = msg
                                return // This is critical to move on to the next user
                            }
                        }
                        
                        try { // required
                            // If time is valid update with in the ST format (2018-07-31T04:07:06.000-0400)
                            if (!(expireDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                                 throw new RuntimeException("Invalid date format")
                            }
                            if (!(expTime ==~ /^(0?[0-9]|1[0-9]|2[0-3])\:(0?[0-9]|[1-5][0-9])$/)) { // Check for valid time format (HH:mm)
                                throw new RuntimeException("Invalid time format")
                            }
                            slot.expTime = timeToday(expTime, timeZone).format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timeZone)
                            Date.parse("yyyy-MM-ddHH:mmZ", expireDate + timeToday(slot.expTime, timeZone).format("HH:mmZ", timeZone)) // Test it
                        } catch (e) {
                            def msg = "Invalid expiry date/time"
                            log.error "API: User $user $msg\n$e"
                            invalidUsersList[user] = msg
                            return // This is critical to move on to the next user
                        }

                        validUsersList.add(slot)
                        break
                    
                    case "Scheduled": // "schedules":{"A":{"dow":["Monday","Tuesday","Friday"],"startTime":"11:59","endTime":"22:22"}}
                    	try {
                            for (schedule in schedules) {
                                def suffix = schedule.key
                                def data = schedule.value
                                if (!schedulesSuffix.contains(suffix)) { // Check if it's a valid schedule
                                    def msg = "Schedule $suffix, invalid schedule"
                                    log.error "API: User $user $msg"
                                    invalidUsersList[user] = msg
                                    return // This is critical to move on to the next user
                                }

                                if (!data?.dow || !data?.dow.every { schedulingOptions.contains(it) }) { // Check if all the DOW's is valid
                                    def msg = "Schedule $suffix, invalid day of week. Allowed types: $schedulingOptions"
                                    log.error "API: User $user $msg"
                                    invalidUsersList[user] = msg
                                    return // This is critical to move on to the next user
                                }

                                try { // Check if start/end time are valid (HH:MM)
                                    if (data.startTime || data.endTime) { // We need both or none
                                        // If both are valid update them with in the ST format (2018-07-31T04:07:06.000-0400)
                                        if (!(data.startTime ==~ /^(0?[0-9]|1[0-9]|2[0-3])\:(0?[0-9]|[1-5][0-9])$/)) { // Check for valid time format (HH:mm)
                                            throw new RuntimeException("Invalid time format")
                                        }
                                        if (!(data.endTime ==~ /^(0?[0-9]|1[0-9]|2[0-3])\:(0?[0-9]|[1-5][0-9])$/)) { // Check for valid time format (HH:mm)
                                            throw new RuntimeException("Invalid time format")
                                        }
                                        data.startTime = timeToday(data.startTime, timeZone).format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timeZone)
                                        data.endTime = timeToday(data.endTime, timeZone).format("yyyy-MM-dd'T'HH:mm:ss.SSSZ", timeZone)
                                    } else {
                                        throw new RuntimeException("Missing time settings")
                                    }
                                } catch (e) {
                                    def msg = "Schedule $suffix, invalid time"
                                    log.error "API: User $user $msg\n$e"
                                    invalidUsersList[user] = msg
                                    return // This is critical to move on to the next user
                                }
                            }
                        } catch (e) {
                            def msg = "Invalid schedules"
                            log.error "API: User $user $msg\n$e"
                            invalidUsersList[user] = msg
                            return // This is critical to move on to the next user
                        }
                        validUsersList.add(slot)
                    	break
                    
                    case "Modes": // "modes":["Home","Night"]
                    	try {
                            if (modes && !(modes instanceof List)) {
                                def msg = "Modes must be a List"
                                log.error "API: User $user $msg"
                                invalidUsersList[user] = msg
                                return // This is critical to move on to the next user                
                            } else if (!modes || !modes.every { mode -> location.modes?.find{ it.name == mode } }) { // Check for valid modes, need atleast one
                                def msg = "Mode does not exist, valid modes: ${location.modes*.name}"
                                log.error "API: User $user $msg"
                                invalidUsersList[user] = msg
                                return // This is critical to move on to the next user
                            }
                        } catch (e) {
                            def msg = "Invalid modes"
                            log.error "API: User $user $msg\n$e"
                            invalidUsersList[user] = msg
                            return // This is critical to move on to the next user
                        }

                        validUsersList.add(slot)
                    	break
                    
                    case "Inactive":
                        validUsersList.add(slot)
                    	break
                    
                    case "Presence": // We can't add presence remotely since we need a presence object
                    default: // These are invalid
                        def msg = "Invalid user type, allowed types: ${codeOptions.keySet() - "Presence"}"
                        log.error "API: User $user $msg"
                        invalidUsersList[slot.user] = msg
                        return // Move onto the next user                    
                }
            } else {
                if (slot) { // Ignore empty settings
                    def msg = "Invalid user settings"
                    if (!slot.name) {
                        msg = "Name missing"
                    }
                    
                    log.error "API: User ${slot.user} $msg"
                    invalidUsersList[slot.user] = msg
                }
            }
        }
        
        // Update users in the end
        log.debug "API: Updating users: ${validUsersList.collectEntries { [ (it.user as String) : (it.name as String) ] }}\nIgnoring invalid users: ${invalidUsersList}"
        updateUsers(validUsersList) // Remove user information

        // Check for user conflicts in the end after updating everything
        for (int j = 1; j <= maxUserNames; j++) {
            validUsersList.each  { slot ->
                def i = slot.user as Integer
                def user = slot.user as String
                def code = slot.code
                if (code && (i != j) && (code == settings."userCodes${j}")) {
                    def msg = "User $i and user $j share the same code, programming may fail"
                    log.warn "API: $msg"
                    invalidUsersList[user] = msg // Add to list of warnings but continue as it isn't critical
                }
            }
        }
        
        runIn(1, appTouch) // After updating programming we need to reset the retry lock and reinitialize other parameters
    } catch (e) {
        def msg = "Invalid user update data"
        log.error "$msg\n$e"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    return [processed: validUsersList.collectEntries { [ (it.user as String) : (it.name as String) ] }, invalid: invalidUsersList] // Return results
}

// API - Delete users
private apiDeleteUsers(users) {
    //log.trace "API Delete Users ->\n${users}"

    def validUsersList = [] // Users on which we will finally take action
    def invalidUsersList = [] // Users on which we will finally take action
    def removeList = [] // Unique list of users to remove

    if (!users) {
        def msg = "No user information provided, nothing to delete"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    if (!maxUserNames) {
        def msg = "No programmable users available, please configure Max programmable users through the SmartThings app"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    try {
        if (users.size() > platformAPIUsersLimit) { // Sanity check for platform limits
            def msg = "Cannot delete more than ${platformAPIUsersLimit} users at a time"
            log.error "API: $msg"
            return render(contentType: "text/plain", data: msg, status: 400)
        }
        
        // Find if the user names are part of existing slots and assign the slot number accordingly
        users.each { user ->
            if ((user instanceof Integer) || ((user instanceof String) && user.isInteger())) { // If there is a user slot
                if (((user as Integer) > 0) && ((user as Integer) <= maxUserNames)) { // Check if we have a valid user slot
                    validUsersList.add(user as String)
                    removeList.add(user as Integer)
                } else {
                    invalidUsersList.add(user as String)
                }
            } else { // Otherwise find slot
                def userInfos = findUsers(user) // Find all users with this name
                if (!userInfos) { // Doesn't exist, ignore it
                    invalidUsersList.add(user as String)
                } else {
                    userInfos.each { userInfo ->
                        validUsersList.add(user as String) // Delete all user slots with this name
                        removeList.add(userInfo.user as Integer)
                    }
                }
            }
        }
        
        log.debug "API: Removing users: ${removeList.unique()}\nValid Users:${validUsersList}\nIgnoring invalid users: ${invalidUsersList}"
        removeUsers(removeList.unique()) // Remove user information, keep only unique user numbers to avoid overhead
        runIn(1, appTouch) // After updating programming we need to reset the retry lock and reinitialize other parameters
    } catch (e) {
        def msg = "Invalid user delete data"
        log.error "$msg\n$e"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    return [processed: validUsersList.collect { it as String }, invalid: invalidUsersList.collect { it as String }] // Return results
}

// API - Get user information
private apiGetUsers(users) {
    //log.trace "API Get Users ->\n${users}"

    def validUsersList = [] // Users on which we will finally take action
    def invalidUsersList = [] // Users on which we will finally take action

    if (!users) {
        def msg = "No user information provided, nothing to get"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    if (!maxUserNames) {
        def msg = "No programmable users available, please configure Max programmable users through the SmartThings app"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    try {
        if (users.size() > platformAPIUsersLimit) { // Sanity check for platform limits
            def msg = "Cannot update more than ${platformAPIUsersLimit} users at a time"
            log.error "API: $msg"
            return render(contentType: "text/plain", data: msg, status: 400)
        }
        
        users.each { user ->
            if ((user instanceof Integer) || ((user instanceof String) && user.isInteger())) { // If there is a user slot
                if (((user as Integer) > 0) && ((user as Integer) <= maxUserNames)) { // Check if we have a valid user slot
                    def userInfo = findSlot(user as Integer)
                    cleanUpUserInfo(userInfo) // Clean up stuff
                    userInfo.lockProgrammedState = programmedSlotState(user as Integer) // Add the user state
                    validUsersList.add(userInfo)
                } else {
                    invalidUsersList.add(user as String)
                }
            } else { // Otherwise find slot
                def userInfos = findUsers(user) // Find all users with this name
                if (!userInfos) { // Doesn't exist, ignore it
                    invalidUsersList.add(user as String)
                } else {
                    userInfos.each { userInfo ->
                        cleanUpUserInfo(userInfo) // Clean up stuff
                        userInfo.lockProgrammedState = programmedSlotState(userInfo.user as Integer) // Add the user state
                        validUsersList.add(userInfo)
                    }
                }
            }
        }

        log.debug "API: Got users: ${validUsersList*.user}\nIgnoring invalid users: ${invalidUsersList}"
    } catch (e) {
        def msg = "Invalid user get data"
        log.error "$msg\n$e"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    return [processed: validUsersList, invalid: invalidUsersList.collect { it as String }] // Return results
}

// API - Process lock actions
private apiLockActions(cmds) {
    //log.trace "API Lock Actions ->\n${cmds}"

    def validCmdsList = [] // Commands on which we will finally take action
    def invalidCmdsList = [] // Commands on which we will finally take action

    if (!cmds) {
        def msg = "No lock action information provided, nothing to do"
        log.warn "API: $msg"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    try {
        cmds.each { cmd ->
            def lock = locks.find { lock -> lock.displayName == cmd.name }
            
            if (!lock) {
                invalidCmdsList.add([(cmd.name) : "Invalid lock"])
            } else {
                if (!lock.hasCommand(cmd.action)) {
                    invalidCmdsList.add([(cmd.name) : "Unsupported action '${cmd.action}'"])
                } else {                
                    if (cmd.parameters) {
                        lock."${cmd.action}"(*cmd.parameters)
                        validCmdsList.add([ (cmd.name) : (cmd.action) ]) // Success tag it
                    } else {
                        lock."${cmd.action}"()
                        validCmdsList.add([ (cmd.name) : (cmd.action) ]) // Success tag it
                    }
                }
            }
        }

        log.debug "API: Valid lock action commands: ${validCmdsList}\nIgnoring invalid commands: ${invalidCmdsList}"
    } catch (e) {
        def msg = "Invalid lock action data"
        log.error "$msg\n$e"
        return render(contentType: "text/plain", data: msg, status: 400)
    }
    
    return [processed: validCmdsList, invalid: invalidCmdsList] // Return results
}

// Create OAuth URL
private setupCallBackURL(child) {
    log.trace "Revoking old and Creating New Access Token for callback" // For security purposes each time we initialize we create a new token

    try {
        revokeAccessToken() // First kill the old tokens
        createAccessToken() // Now create a new token
    } catch (e) {
        def msg = "Error creating access token, have you ENABLED OAuth in the SmartApp Settings?"
        log.error (msg + "\nError : $e")
        sendPush msg
        return ""
    }

    // Each instance will call this URL with their Id's
    //def callbackURL = "http://graph.api.smartthings.com/api/token/${state.accessToken}/smartapps/installations/${app.id}/api"
    //def callbackURL = apiServerUrl("/api/token/${state.accessToken}/smartapps/installations/${app.id}/api")
    def callbackURL = apiServerUrl("/api/smartapps/installations/${app.id}/api?access_token=${state.accessToken}") // New format per documentation

    log.trace "New Callback URL -> $callbackURL"

    return callbackURL
}

// Retrieve OAuth URL
private getCallBackURL() {
    if (!state.accessToken) {
        log.error "No Access Token found for callback, not returning any callbackURL"
        return ""
    }

    // Each instance will call this URL with their Id's
    //def callbackURL = "http://graph.api.smartthings.com/api/token/${state.accessToken}/smartapps/installations/${app.id}/api"
    //def callbackURL = apiServerUrl("/api/token/${state.accessToken}/smartapps/installations/${app.id}/api")
    def callbackURL = apiServerUrl("/api/smartapps/installations/${app.id}/api?access_token=${state.accessToken}") // New format per documentation

    log.trace "Getting Callback URL -> $callbackURL"

    return callbackURL
}


// UPDATING USER SETTINGS PROGRAMATICALLY
// Replace all null with empty/specified strings
def deNull(root, replaceNullWith = "") {
    if (root instanceof List) {
        root.collect {
            if (it instanceof Map) {
                deNull(it, replaceNullWith)
            } else if (it instanceof List) {
                deNull(it, replaceNullWith)
            } else if ((it == "null") || (it == null)) {
                replaceNullWith
            } else {
                it
            }
        }
    } else if (root instanceof Map) {
        root.each {
            if (it.value instanceof Map) {
                deNull(it.value, replaceNullWith)
            } else if (it.value instanceof List) {
                it.value = deNull(it.value, replaceNullWith)
            } else if ((it.value == "null") || (it.value == null)) {
                it.value = replaceNullWith
            }
        }
    }
}

// Gets the details of the user from a lot
private findSlot(i) {
    def ret = [:]
    
    // Get String settings from the old slot
    ret.user = i
    ret.name = settings."userNames${i}"
    ret.code = settings."userCodes${i}"
    ret.type = settings."userType${i}"
    ret.startDate = settings."userStartDate${i}"
    ret.expDate = settings."userExpireDate${i}"
    ret.startTime = settings."userStartTime${i}"
    ret.expTime = settings."userExpireTime${i}"
    ret.userLocks = settings."userLocks${i}"
    ret.modes = settings."userModes${i}"
    ret.notifyModes = settings."userNotifyModes${i}"
    ret.schedules = [:]
    schedulesSuffix.each { schedule -> // For each schedule we expect
        ret.schedules[schedule] = [:]
        ret.schedules[schedule].startTime = settings."userStartTime${schedule}${i}"
        ret.schedules[schedule].endTime = settings."userEndTime${schedule}${i}"
        ret.schedules[schedule].dow = settings."userDayOfWeek${schedule}${i}"
    }

    // The platform reads the values as null or "null" sometimes, replace it with an empty string
    ret = deNull(ret)

    // Get Boolean settings
    ret.notify = (settings."userNotify${i}" && (settings."userNotify${i}" != "null")) ? settings."userNotify${i}".toBoolean() : false // Don't use null and save a bool

    // Get Number settings
    ret.notifyCount = (settings."userNotifyUseCount${i}" && (settings."userNotifyUseCount${i}" != "null")) ? (settings."userNotifyUseCount${i}" as Integer) : "" // Don't use null and save as an integer

    return ret
}

// Check for multiple users by the same name and returns the details
private findUsers(name) {
    def ret = []
    
    for (int i = 1; i <= maxUserNames; i++) {
        if (settings."userNames${i}" == name) { // We found the slot
            ret << findSlot(i)
            //log.trace "Found existing user $name in slot $i, settings: ${ret.inspect()}"
        }
    }

    return ret
}

// Checks if there is a user by the name and returns the details
private findUser(name) {
    def ret = [:]
    
    for (int i = 1; i <= maxUserNames; i++) {
        if (settings."userNames${i}" == name) { // We found the slot
            ret = findSlot(i)
            //log.trace "Found existing user $name in slot $i, settings: ${ret.inspect()}"
            break // We're done here
        }
    }

    return ret
}

// Find all empty slots, returns [] if no slots found
private findAllEmptySlots() {
    def es = []
    
    for (int i = 1; i <= maxUserNames; i++) {
        if (!settings."userNames${i}") { // We found an empty slot
            //log.trace "Found empty slot $i"
            es.add(i)
        }
    }
    
    return es // Return list of empty slots
}    

// Find next empty slot, returns 0 if no slot found
private findNextEmptySlot() {
    for (int i = 1; i <= maxUserNames; i++) {
        if (!settings."userNames${i}") { // We found an empty slot
            //log.trace "Found empty slot $i"
            return i // We're done here
        }
    }
    
    return 0 // Nothing found
}    

// Update user settings in the app
private void updateUsers(slots) {
    def map = [:] // Consolidate them to avoid DB timeouts
    slots?.each { slot ->
        def user = slot.user
        def name = slot.name
        def code = slot.code
        def type = slot.type
        def startDate = slot.startDate
        def startTime = slot.startTime
        def expDate = slot.expDate
        def expTime = slot.expTime
        def notify = slot.notify
        def notifyCount = slot.notifyCount
        def userLocks = slot.userLocks
        def schedules = slot.schedules
        def modes = slot.modes
        def notifyModes = slot.notifyModes

        //log.trace "Updating settings user: $user, code: $code, startDate: $startDate, startTime: $startTime, expDate: $expDate, expTime: $expTime, notify: $notify, notifyCount: $notifyCount, userLocks: $userLocks"

        // Write all settings in the new slot, use "" for empty/no value instead of null
        // String values
        map["userNames${user}"] = (name ?: "") // Set the new name
        map["userCodes${user}"] = (code ?: "") // Set the new code
        map["userType${user}"] = (type ?: "") // Set the user type
        map["userStartDate${user}"] = (startDate ?: "") // Set start date
        map["userExpireDate${user}"] = (expDate ?: "") // Set expire date
        map["userStartTime${user}"] = (startTime ?: "") // Set start time
        map["userExpireTime${user}"] = (expTime ?: "") // Set expire time
        map["userLocks${user}"] = (userLocks ?: "") // Set user locks
        map["userModes${user}"] = (modes ?: "") // Set user modes
        map["userNotifyModes${user}"] = (notifyModes ?: "")  // Set notify modes
        schedulesSuffix.each { schedule -> // For each schedule we expect
            def match = schedules?.find { suffix, data -> suffix == schedule }
            if (match) { // Extract schedules
                def suffix = match.key
                def data = match.value
                map["userStartTime${schedule}${user}"] = (data?.startTime ?: "") // Set End time
                map["userEndTime${schedule}${user}"] = (data?.endTime ?: "") // Set Start time
                map["userDayOfWeek${schedule}${user}"] = (data?.dow ?: "") // Set DOW
            } else { // Clear those schedules not specified
                map["userStartTime${schedule}${user}"] = "" // Set End time
                map["userEndTime${schedule}${user}"] = "" // Set Start time
                map["userDayOfWeek${schedule}${user}"] = "" // Set DOW
            }
        }
        
        // Boolean values
        map["userNotify${user}"] = ((notify == null) ? "" : notify as String) // Enable notifications for user, use "" for null and save true/false as string
        
        // Number values
        map["userNotifyUseCount${user}"] = (notifyCount ?: "") // How many notifications for user (0 can default as empty)
        
        // Empty settings
        map["userOverrideUnlockActions${user}"] = ("") // No custom actions for users, can't use false since it takes it as a string
        map["userOverrideNotifications${user}"] = ("") // No custom notifications for users
    }
    
    // Bulk updated
    if (map) {
        updateSettings(map)
    }
}

// Remove rental user settings called from a runIn offline
def removeUsersOffline(evt) {
    log.trace "Offline removing settings users: ${(evt.data?.start)..(evt.data?.end)}"
    removeUsers((evt.data?.start)..(evt.data?.end))
}

// Remove users settings in the app (array of users slot numbers)
private removeUsers(users) {
    def map = [] // Consolidate and remove since it's faster with the DB otherwise it times out

    users?.each { user ->
        //log.trace "Removing settings user: $user, code: $code, startDate: $startDate, startTime: $startTime, expDate: $expDate, expTime: $expTime"
        map << "userNames${user}" // name
        map << "userCodes${user}" // code
        map << "userType${user}" // type
        map << "userStartDate${user}" // start date
        map << "userExpireDate${user}" // expire date
        map << "userStartTime${user}" // start time
        map << "userExpireTime${user}" // expire time
        map << "userNotify${user}" // notifications for user
        map << "userNotifyUseCount${user}" // how many notifications for user
        map << "userLocks${user}" // user locks
        map << "userOverrideUnlockActions${user}" // custom actions
        map << "userOverrideNotifications${user}" // custom notifications
        map << "userModes${user}" // User active modes
        map << "userNotifyModes${user}" // User notify modes
        schedulesSuffix.each { schedule -> // Weekly schedules
            map << "userStartTime${schedule}${user}" // End time
            map << "userEndTime${schedule}${user}" // Start time
            map << "userDayOfWeek${schedule}${user}" // Set DOW
        }
    }
    
    if (map) {
        deleteSettings(map)
    }
}

// Internal method to sanitize userInfo to be returned by API
private void cleanUpUserInfo(userInfo) {
    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
    }

    userInfo.userLocks = locks ? ((locks?.size() > 1) && userInfo.userLocks ? (userInfo.userLocks.collect { userLock -> locks.find { lock -> lock.id == userLock }?.displayName } - null) : locks*.displayName) : [] // Replace ID with name
    userInfo.notifyModes = userInfo.notifyModes ?: [] // Expecting an array
    userInfo.startTime = userInfo.startTime ? timeToday(userInfo.startTime, timeZone).format("HH:mm", timeZone) : ""
    userInfo.expTime = userInfo.expTime ? timeToday(userInfo.expTime, timeZone).format("HH:mm", timeZone) : ""
    userInfo.schedules = userInfo.schedules.collectEntries { prefix, schedule ->
        schedule.dow = schedule.dow ?: []
        schedule.startTime = schedule.startTime ? timeToday(schedule.startTime, timeZone).format("HH:mm", timeZone) : ""
        schedule.endTime = schedule.endTime ? timeToday(schedule.endTime, timeZone).format("HH:mm", timeZone) : ""
        return [ "$prefix" : schedule ]
    }
    userInfo.notifyCount = userInfo.notifyCount ?: 0
    userInfo.modes = userInfo.modes ?: []
}

// Check for multiple users by the same name and returns the programmed status
private programmedUserState(name) {
    def ret = []
    for (int i = 1; i <= maxUserNames; i++) {
        if (settings."userNames${i}" == name) { // We found the slot
            ret << programmedSlotState(i)
            //log.trace "Found user $name in slot $i, settings: ${ret.inspect()}"
        }
    }
    
    return ret
}

// Gets the details of the programmed user state from a slot
private programmedSlotState(i) {
    def ret = [:]
    
    def priorName = settings."userNames${i}"
    def priorCode = settings."userCodes${i}"
    def priorExpireDate = settings."userExpireDate${i}"
    def priorExpireTime = settings."userExpireTime${i}"
    def priorStartDate = settings."userStartDate${i}"
    def priorStartTime = settings."userStartTime${i}"
    def priorUserType = settings."userType${i}"
    def priorUserPresent = settings."userPresent${i}" // Get user presence
    def priorUserNotPresent = settings."userNotPresent${i}" // Get user not presence
    def priorUserModes = settings."userModes${i}" // Get user modes
    def userLocks = (locks?.size() > 1) ? (settings."userLocks${i}" ?: locks*.id) : locks*.id // If not defined or only one lock then check all locks
    def invalidStartDate = false
    def invalidExpiryDate = false
    def userSummary = ""
    def userSlotActive = true
    log.trace "User $i Name: $priorName, Code: $priorCode, ExpireDate: $priorExpireDate, ExpireTime: $priorExpireTime, StartDate: $priorStartDate, StartTime: $priorStartTime, UserType: $priorUserType, UserPresent: $priorUserPresent, UserNotPreset: $priorUserNotPresent"

    TimeZone timeZone = location.timeZone
    if (!timeZone) {
        timeZone = TimeZone.getDefault()
        def msg = "Hub geolocation not set, using ${timeZone.getDisplayName()} timezone. Use the SmartThings app to set the Hub geolocation to identify the correct timezone."
        log.error msg
        sendPush msg
        section("INVALID HUB LOCATION") {
            paragraph title: msg, required: true, ""
        }
    }

    // Check for errors and display messages
    if (priorCode) { // Do all the checks only if user has been configured
        // Sanity check, codes cannot be reused in the same lock (codes have to be unique to each slot)
        def allUserCodes = (1..(maxUserNames ?: 0)).collectEntries { [(it):settings."userCodes${it}"] } // Get all user codes to save db access time
        getDuplicateCodeUsers(allUserCodes, i).each { j ->
            def msg = "CHANGE CODE - THIS CODE HAS BEEN USED FOR USER $j"
            log.warn "CHANGE CODE FOR USER $i - THIS CODE HAS BEEN USED FOR USER $j"
            userSummary += (userSummary ? "\n" : "") + msg
        }

        // Check if the user has entered a non digit string
        if ((priorCode?.size() > 0) && !priorCode?.isNumber()) {
            def msg = "WARNING: CODE IS NOT A NUMBER, PROGRAMMING WILL FAIL!"
            log.warn msg
            userSummary += (userSummary ? "\n" : "") + msg
        }

        // Check if the lock pin code length match the pin code length entered by the user
        def pinDetails = getLockPinLengthDetails((locks ?: []).findAll { userLocks.contains(it?.id) })
        def pinLen = pinDetails.pinLen // Fixed pin code length
        def maxPinLen = pinDetails.maxPinLen // Variable minimum pin code length
        def minPinLen = pinDetails.minPinLen // Variable maximum pin code length
        def pinLenError = pinDetails.pinLenError
        //log.trace "Configured lock fixed code length: $pinLen, max code length: $maxPinLen, min code length: $minPinLen"

        for (lock in locks) {
            if (userLocks?.contains(lock.id) && (pinLen || (maxPinLen && minPinLen))) { // Check if the lock support reporting pin length and it has a valid number to report (not 0 or null)
                if ((priorCode?.size() > 0) && (pinLen ? pinLen != priorCode.size() : ((priorCode.size() < minPinLen) || (priorCode.size() > maxPinLen)))) { // If we have a code to program
                    def msg = "$lock IS CONFIGURED TO ACCEPT ${pinLen ?: "${minPinLen}-${maxPinLen}"} DIGIT CODES ONLY, PROGRAMMING WILL FAIL!"
                    log.warn msg
                    userSummary += (userSummary ? "\n" : "") + msg
                    break // one message is enough
                }
            }
        }

        // Sanity check for expiration date formats
        switch (priorUserType) {
            case 'Expire on':
                if (priorStartDate) {
                    //log.trace "Found start date in setup"
                    try {
                        if (!(priorStartDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                            throw new RuntimeException("Invalid date format")
                        }
                        def df = Date.parse("yyyy-MM-ddHH:mm", priorStartDate + "00:00") // Test it
                        invalidStartDate = false
                    }
                    catch (Exception e) {
                        log.warn "Invalid start date for user $i"
                        invalidStartDate = true
                    }
                }
                if (priorExpireDate) {
                    //log.trace "Found expiry date in setup"
                    try {
                        if (!(priorExpireDate ==~ /^\d{4}\-(0[1-9]|1[012])\-(0[1-9]|[12][0-9]|3[01])$/)) { // Check for valid date format (yyyy-MM-dd)
                            throw new RuntimeException("Invalid date format")
                        }
                        def df = Date.parse("yyyy-MM-ddHH:mm", priorExpireDate + "00:00") // Test it
                        invalidExpiryDate = false // We passed it's a valid date
                    }
                    catch (Exception e) {
                        log.warn "Invalid expiry date for user $i"
                        invalidExpiryDate = true
                    }
                }

                if (!invalidExpiryDate && !invalidStartDate) {
                    if (priorExpireDate) {
                        def expired = false
                        if (priorExpireTime) {
                            // Parse the entire date/time including timezone since the Date object is converted and stored in UTC internally
                            def exp = Date.parse("yyyy-MM-ddHH:mmZ", priorExpireDate + timeToday(priorExpireTime, timeZone).format("HH:mmZ", timeZone))
                            if (exp.getTime() < now()) {
                                def msg = "Code EXPIRED!"
                                userSummary += (userSummary ? "\n" : "") + msg
                                expired = true
                                userSlotActive = false
                            } else {
                                if (priorStartDate && priorStartTime && !expired) {
                                    def start = Date.parse("yyyy-MM-ddHH:mmZ", priorStartDate + timeToday(priorStartTime, timeZone).format("HH:mmZ", timeZone))
                                    if (start.getTime() > now()) {                                                
                                        def msg = "Activates ${start.format("EEE MMM dd HH:mm", timeZone)}"
                                        userSummary += (userSummary ? "\n" : "") + msg
                                        userSlotActive = false
                                    }
                                }
                                def msg = "Expires ${exp.format("EEE MMM dd HH:mm", timeZone)}"
                                userSummary += (userSummary ? "\n" : "") + msg
                            }
                        }
                    }
                } else {
                    def msg = "INVALID Date!"
                    userSummary += (userSummary ? "\n" : "") + msg
                    userSlotActive = false
                }
                break

            case 'One time':
                if (state.trackUsedOneTimeCodes?.contains(i as String)) {
                    def msg = "One time code USED!"
                    userSummary += (userSummary ? "\n" : "") + msg
                    userSlotActive = false
                }
                break

            case 'Scheduled':
                if (!(schedulesSuffix.any { schedule -> settings."userDayOfWeek${schedule}${i}" })) { // If no schedules are defined
                    def msg = "No schedule defined!"
                    userSummary += (userSummary ? "\n" : "") + msg
                    userSlotActive = false
                } else if (!schedulesSuffix.any { schedule -> checkSchedule(i, schedule) }) { // Check if we are outside operating schedule
                    userSlotActive = false
                }
                break

            case 'Presence':
                if (!(priorUserPresent || priorUserNotPresent)) { // No conditions is specified
                    def msg = "No presence defined!"
                    userSummary += (userSummary ? "\n" : "") + msg
                    userSlotActive = false
                } else if (!((priorUserPresent || priorUserNotPresent) && // No condition is true
                             (priorUserPresent ? priorUserPresent.any{it.currentPresence == "present"} : true) &&
                             (priorUserNotPresent ? priorUserNotPresent.every{it.currentPresence != "present"} : true)
                            )) {
                    userSlotActive = false
                }
                break

            case 'Modes':
                if (!priorUserModes?.find{it == location.mode}) {
                    userSlotActive = false
                }
                break

            case 'Inactive':
                userSlotActive = false
                break

            default:
                break
        }
    } else if (priorName) { // Incomplete configuration
        def msg = "No code defined!"
        userSummary += (userSummary ? "\n" : "") + msg
        userSlotActive = false
    } else { // Not configured
        userSlotActive = false
    }

    // Check if code has been changed and pending programming by lock
    for (lock in locks) {
        if (userLocks?.contains(lock.id)) {
            if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update
                ret[lock.displayName] = "Failed"
            } else if (userSlotActive && (state.lockCodes != null) && (state.lockCodes[lock.id]?.(i as String) != priorCode)) { // Programming pending update
                ret[lock.displayName] = "Pending program"
            } else if (!userSlotActive && (state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update
                ret[lock.displayName] = "Pending deletion"
            }
        } else if ((state.retryCodeCount != null) && (state.retryCodeCount[lock.id]?.(i as String) > (maxRetries + 1))) { // Failed to update from lock not selected
            ret[lock.displayName] = "Failed"
        } else if ((state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Deletion pending update from a lock not selected
            ret[lock.displayName] = "Pending deletion"
        }
        
        if (!ret[lock.displayName]) { // If it isn't failed/pending then it's active or inactive
            if ((state.lockCodes != null) && state.lockCodes[lock.id]?.(i as String)) { // Still active
                ret[lock.displayName] = "Active"
            } else {
                ret[lock.displayName] = "Inactive"
            }
        }
    }
    
    return ret
}

// Returns a list of users who have the same user code as the user
private getDuplicateCodeUsers(allUserCodes, i) {
    allUserCodes.groupBy { it.value }.findAll { (it.key) && (it.value.size() > 1) && (it.value*.key).contains(i) }*.value*.keySet()?.flatten() - i
}

// Override the user settings
// Update a single setting
private updateSetting(name, value) {
    app.updateSetting(name, value) // For SmartApps UI - THIS IS A VERY SLOW TRANSACTION as it writes directly to the DB
    settings[name] = value // For Device Handlers and SmartApps - much faster but only works on uninitialized value (once the user updates it this approach won't work)
}

// Update multiple settings passed in a map
private updateSettings(map) {
    app.updateSettings(map)
    map.each { name, value -> // Force the DB to reload new values
        settings[name] = value
    }
}

// Delete a single setting
private deleteSetting(name) {
    //app.deleteSetting(name) // For SmartApps delete it, TODO: Gives and error - THIS IS A VERY SLOW TRANSACTION as it writes directly to the DB (don't mix app and settings approach or it causes corruption)
    //settings.remove(name) // For Device Handlers
    app.updateSetting(name, '') // For SmartApps - THIS IS A VERY SLOW TRANSACTION as it writes directly to the DB (don't mix app and settings approach or it causes corruption)
    settings[name] = '' // For Device Handlers and SmartApps - much faster but only works on uninitialized value (once the user updates it this approach won't work)
}

// Delete multiple settings passed in an array
private deleteSettings(map) {
    def mapValues = [:]
    map.each { mapValues[it] = '' }
    app.updateSettings(mapValues)
    map.each { name -> // Force the DB to reload new values
        settings[name] = '' 
    }
}

private loginCheck() {
    log.trace "Login check"
	
    authUpdate("check") { resp ->
        if (resp?.status == 401) { // Invalid username
            state.loginError = "Invalid username" // No response from website - we should not be here
            state.loginSuccess = false
        } else if ((resp?.status == 200) && resp?.data) {
            def ret = resp.data
            if (ret?.Authenticated) {
                state.loginError = ""
                state.loginSuccess = true
            } else {
                state.loginError = ret?.Error
                state.loginSuccess = false
            }
        } else {
            state.loginError = "Unable to authenticate license, please try again later" // No response from website - we should not be here
            state.loginSuccess = false
        }
    }
}

private authUpdate(String action, Closure closure = null) {
    if (!username) {
    	return
    }
    
    def params = [
        uri: "https://auth.rboyapps.com/v1/license",
        headers: [
            Authorization: "Basic ${"${username?.trim()?.toLowerCase()}:${username?.trim()?.toLowerCase()}".getBytes().encodeBase64()}",
        ],
        body: [
            AppId: app.id,
            Timestamp: new Date(now()).format("yyyy-MM-dd'T'HH:mm:ssXXX", location.timeZone ?: TimeZone.getDefault()), // ISO_8601
            State: action,
            Username: username?.trim()?.toLowerCase(),
            LocationId: location.id,
            LocationName: location.name,
            AccountId: app.accountId,
            AppName: "Lock Manager API",
            AppInstallName: app.label,
            AppVersion: clientVersion(),
        ]
    ]
    
    log.trace "Calling AuthUpdate\n${params}"

    try {
        httpPostJson(params) { resp ->
            /*resp?.headers.each {
                log.trace "${it.name} : ${it.value}"
            }
            log.trace "response contentType: ${resp?.contentType}"*/
            log.debug "response data: ${resp?.data}"
            if (closure) {
                closure(resp)
            }
        }
    } catch (e) {
        //log.error "Auth response:\n${e.response?.data}\n\n${e.response?.allHeaders}\n\n${e.response?.status}\n\n${e.response?.statusLine}\n\n$e"
        if ("${e}"?.contains("HttpResponseException")) { // If it's a HTTP error with non 200 status
            log.warn "Auth status: ${e?.response?.status}, response: ${e?.response?.statusLine}"
            if (closure) {
                closure(e?.response)
            }
        } else { // Some other error
            log.error "Auth error: $e"
            if (closure) {
                closure(null)
            }
        }
    }
}

def checkForCodeUpdate(evt = null) {
    log.trace "Getting latest version data from the RBoy Apps server"
    
    def appName = "Lock Manager API"
    def serverUrl = "http://smartthings.rboyapps.com"
    def serverPath = "/CodeVersions.json"
    
    try {
        httpGet([
            uri: serverUrl,
            path: serverPath
        ]) { ret ->
            log.trace "Received response from RBoy Apps Server, headers=${ret.headers.'Content-Type'}, status=$ret.status"
            //ret.headers.each {
            //    log.trace "${it.name} : ${it.value}"
            //}

            if (ret.data) {
                log.trace "Response>" + ret.data
                
                // Check for app version updates
                def appVersion = ret.data?."$appName"
                if (appVersion > clientVersion()) {
                    def msg = "New version of app ${app.label} available: $appVersion, current version: ${clientVersion()}.\nPlease visit $serverUrl to get the latest version."
                    log.info msg
                    if (updateNotifications != false) { // The default true may not be registered
                        sendPush(msg)
                    }
                } else {
                    log.trace "No new app version found, latest version: $appVersion"
                }
                
                // Check device handler version updates
                def devices = locks?.findAll { it.hasAttribute("codeVersion") }
                for (device in devices) {
                    if (device) {
                        def deviceName = device?.currentValue("dhName")
                        def deviceVersion = ret.data?."$deviceName"
                        if (deviceVersion && (deviceVersion > device?.currentValue("codeVersion"))) {
                            def msg = "New version of device handler for ${device?.displayName} available: $deviceVersion, current version: ${device?.currentValue("codeVersion")}.\nPlease visit $serverUrl to get the latest version of $deviceName."
                            log.info msg
                            if (updateNotifications != false) { // The default true may not be registered
                                sendPush(msg)
                            }
                        } else {
                            log.trace "No new device version found for $deviceName, latest version: $deviceVersion, current version: ${device?.currentValue("codeVersion")}"
                        }
                    }
                }
            } else {
                log.error "No response to query"
            }
        }
    } catch (e) {
        log.error "Exception while querying latest app version: $e"
    }
}

// THIS IS THE END OF THE FILE

